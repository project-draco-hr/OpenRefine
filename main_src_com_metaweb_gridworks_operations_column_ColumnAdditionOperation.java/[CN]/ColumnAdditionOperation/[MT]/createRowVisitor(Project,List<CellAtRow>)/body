{
  Column column=project.columnModel.getColumnByName(_baseColumnName);
  Evaluable eval=MetaParser.parse(_expression);
  Properties bindings=ExpressionUtils.createBindings(project);
  return new RowVisitor(){
    int cellIndex;
    Properties bindings;
    List<CellAtRow> cellsAtRows;
    Evaluable eval;
    public RowVisitor init(    int cellIndex,    Properties bindings,    List<CellAtRow> cellsAtRows,    Evaluable eval){
      this.cellIndex=cellIndex;
      this.bindings=bindings;
      this.cellsAtRows=cellsAtRows;
      this.eval=eval;
      return this;
    }
    public void start(    Project project){
    }
    public void end(    Project project){
    }
    public boolean visit(    Project project,    int rowIndex,    Row row){
      Cell cell=row.getCell(cellIndex);
      Cell newCell=null;
      ExpressionUtils.bind(bindings,row,rowIndex,_baseColumnName,cell);
      Object o=eval.evaluate(bindings);
      if (o != null) {
        if (o instanceof Cell) {
          newCell=(Cell)o;
        }
 else         if (o instanceof WrappedCell) {
          newCell=((WrappedCell)o).cell;
        }
 else {
          Serializable v=ExpressionUtils.wrapStorable(o);
          if (ExpressionUtils.isError(v)) {
            if (_onError == OnError.SetToBlank) {
              return false;
            }
 else             if (_onError == OnError.KeepOriginal) {
              v=cell != null ? cell.value : null;
            }
          }
          if (v != null) {
            newCell=new Cell(v,null);
          }
        }
      }
      if (newCell != null) {
        cellsAtRows.add(new CellAtRow(rowIndex,newCell));
      }
      return false;
    }
  }
.init(column.getCellIndex(),bindings,cellsAtRows,eval);
}
