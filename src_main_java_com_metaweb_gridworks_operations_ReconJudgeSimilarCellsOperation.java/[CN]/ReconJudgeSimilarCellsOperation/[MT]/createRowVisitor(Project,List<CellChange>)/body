{
  Column column=project.columnModel.getColumnByName(_columnName);
  return new RowVisitor(){
    int _cellIndex;
    List<CellChange> _cellChanges;
    Map<String,Recon> _sharedRecons=new HashMap<String,Recon>();
    public RowVisitor init(    int cellIndex,    List<CellChange> cellChanges){
      _cellIndex=cellIndex;
      _cellChanges=cellChanges;
      return this;
    }
    public boolean visit(    Project project,    int rowIndex,    Row row,    boolean includeContextual,    boolean includeDependent){
      Cell cell=row.getCell(_cellIndex);
      if (cell != null && ExpressionUtils.isNonBlankData(cell.value) && _similarValue.equals(cell.value)) {
        Recon recon=null;
        if (_judgment == Judgment.New && _shareNewTopics) {
          String s=cell.value.toString();
          if (_sharedRecons.containsKey(s)) {
            recon=_sharedRecons.get(s);
          }
 else {
            recon=new Recon();
            recon.judgment=Judgment.New;
            _sharedRecons.put(s,recon);
          }
        }
 else {
          recon=cell.recon == null ? new Recon() : cell.recon.dup();
          if (_judgment == Judgment.Matched) {
            recon.judgment=Recon.Judgment.Matched;
            recon.match=_match;
          }
 else           if (_judgment == Judgment.New) {
            recon.judgment=Recon.Judgment.New;
            recon.match=null;
          }
 else           if (_judgment == Judgment.None) {
            recon.judgment=Recon.Judgment.None;
            recon.match=null;
          }
        }
        Cell newCell=new Cell(cell.value,recon);
        CellChange cellChange=new CellChange(rowIndex,_cellIndex,cell,newCell);
        _cellChanges.add(cellChange);
      }
      return false;
    }
  }
.init(column.getCellIndex(),cellChanges);
}
