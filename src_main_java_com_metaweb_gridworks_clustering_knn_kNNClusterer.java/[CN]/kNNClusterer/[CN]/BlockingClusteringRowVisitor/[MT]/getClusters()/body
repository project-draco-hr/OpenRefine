{
  NGramTokenizer tokenizer=new NGramTokenizer(_blockingNgramSize,_blockingNgramSize,false,SimpleTokenizer.DEFAULT_TOKENIZER);
  Map<String,List<String>> blocks=new HashMap<String,List<String>>();
  for (  String s : _data) {
    Token[] tokens=tokenizer.tokenize(s);
    for (    Token t : tokens) {
      String ss=t.getValue();
      List<String> l=null;
      if (!blocks.containsKey(ss)) {
        l=new ArrayList<String>();
        blocks.put(ss,l);
      }
 else {
        l=blocks.get(ss);
      }
      l.add(s);
    }
  }
  Map<Serializable,Set<Serializable>> clusters=new HashMap<Serializable,Set<Serializable>>();
  for (  List<String> list : blocks.values()) {
    if (list.size() < 2)     continue;
    for (    String a : list) {
      for (      String b : list) {
        if (a == b)         continue;
        if (clusters.containsKey(a) && clusters.get(a).contains(b))         continue;
        if (clusters.containsKey(b) && clusters.get(b).contains(a))         continue;
        double d=_distance.d(a,b);
        if (d <= _radius || _radius < 0) {
          Set<Serializable> l=null;
          if (!clusters.containsKey(a)) {
            l=new TreeSet<Serializable>();
            l.add(a);
            clusters.put(a,l);
          }
 else {
            l=clusters.get(a);
          }
          l.add(b);
        }
      }
    }
  }
  Gridworks.log("Calculated " + _distance.getCount() + " distances");
  return clusters;
}
