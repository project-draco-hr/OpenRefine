{
  if (_token == null) {
    throw makeException("Expression ends too early");
  }
  Evaluable eval=null;
  if (_token.type == TokenType.String) {
    eval=new LiteralExpr(_token.text);
    next();
  }
 else   if (_token.type == TokenType.Number) {
    eval=new LiteralExpr(((NumberToken)_token).value);
    next();
  }
 else   if (_token.type == TokenType.Operator && _token.text.equals("-")) {
    next();
    if (_token != null && _token.type == TokenType.Number) {
      eval=new LiteralExpr(-((NumberToken)_token).value);
      next();
    }
 else {
      throw makeException("Bad negative number");
    }
  }
 else   if (_token.type == TokenType.Identifier) {
    String text=_token.text;
    next();
    if (_token == null || _token.type != TokenType.Delimiter || !_token.text.equals("(")) {
      eval=new VariableExpr(text);
    }
 else {
      Function f=functionTable.get(text);
      if (f == null) {
        throw makeException("Unknown function " + text);
      }
      next();
      List<Evaluable> args=parseExpressionList(")");
      eval=new FunctionCallExpr(makeArray(args),f);
    }
  }
 else   if (_token.type == TokenType.Delimiter && _token.text.equals("(")) {
    next();
    eval=parseExpression();
    if (_token != null && _token.type == TokenType.Delimiter && _token.text.equals(")")) {
      next();
    }
 else {
      throw makeException("Missing )");
    }
  }
 else {
    throw makeException("Missing number, string, identifier, or parenthesized expression");
  }
  while (_token != null) {
    if (_token.type == TokenType.Operator && _token.text.equals(".")) {
      next();
      if (_token == null || _token.type != TokenType.Identifier) {
        throw makeException("Missing function name");
      }
      String identifier=_token.text;
      Function f=functionTable.get(identifier);
      if (f == null) {
        throw makeException("Unknown function " + identifier);
      }
      next();
      if (_token == null || _token.type != TokenType.Delimiter || !_token.text.equals("(")) {
        throw makeException("Missing (");
      }
      next();
      List<Evaluable> args=parseExpressionList(")");
      args.add(0,eval);
      eval=new FunctionCallExpr(makeArray(args),f);
    }
 else     if (_token.type == TokenType.Delimiter && _token.text.equals("[")) {
      next();
      List<Evaluable> args=parseExpressionList("]");
      args.add(0,eval);
      eval=new FunctionCallExpr(makeArray(args),functionTable.get("get"));
    }
 else {
      break;
    }
  }
  return eval;
}
