{
  Column column=project.columnModel.getColumnByName(_columnName);
  return new RowVisitor(){
    int cellIndex;
    List<CellChange> cellChanges;
    Map<Long,Recon> dupReconMap=new HashMap<Long,Recon>();
    long historyEntryID;
    public RowVisitor init(    int cellIndex,    List<CellChange> cellChanges,    long historyEntryID){
      this.cellIndex=cellIndex;
      this.cellChanges=cellChanges;
      this.historyEntryID=historyEntryID;
      return this;
    }
    public void start(    Project project){
    }
    public void end(    Project project){
    }
    public boolean visit(    Project project,    int rowIndex,    Row row){
      Cell cell=row.getCell(cellIndex);
      if (cell != null && cell.recon != null) {
        Recon newRecon;
        if (dupReconMap.containsKey(cell.recon.id)) {
          newRecon=dupReconMap.get(cell.recon.id);
          newRecon.judgmentBatchSize++;
        }
 else {
          newRecon=cell.recon.dup(historyEntryID);
          newRecon.match=null;
          newRecon.matchRank=-1;
          newRecon.judgment=Judgment.None;
          newRecon.judgmentAction="mass";
          newRecon.judgmentBatchSize=1;
          dupReconMap.put(cell.recon.id,newRecon);
        }
        Cell newCell=new Cell(cell.value,newRecon);
        CellChange cellChange=new CellChange(rowIndex,cellIndex,cell,newCell);
        cellChanges.add(cellChange);
      }
      return false;
    }
  }
.init(column.getCellIndex(),cellChanges,historyEntryID);
}
