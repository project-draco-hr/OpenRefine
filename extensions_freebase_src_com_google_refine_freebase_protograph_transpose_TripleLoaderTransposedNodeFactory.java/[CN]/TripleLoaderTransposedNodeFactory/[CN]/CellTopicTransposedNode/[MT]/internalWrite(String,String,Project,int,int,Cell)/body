{
  String id=null;
  if (cell.recon != null && cell.recon.judgment != Recon.Judgment.None) {
    int objectRowIndex=rowIndex;
    int objectCellIndex=cellIndex;
    Cell objectCell=cell;
    String typeID=node.type.id;
    Column column=project.columnModel.getColumnByCellIndex(cellIndex);
    ReconConfig reconConfig=column.getReconConfig();
    if (reconConfig instanceof StandardReconConfig) {
      typeID=((StandardReconConfig)reconConfig).typeID;
    }
    if (cell.recon.judgment == Recon.Judgment.Matched) {
      id=cell.recon.match.id;
    }
 else     if (cell.recon.judgment == Judgment.New) {
      if (newTopicVars.containsKey(cell.recon.id)) {
        id=newTopicVars.get(cell.recon.id);
      }
 else {
        String columnName=column.getName();
        long var=0;
        if (varPool.containsKey(columnName)) {
          var=varPool.get(columnName);
        }
        varPool.put(columnName,var + 1);
        id="$" + columnName.replaceAll("\\W+","_") + "_"+ var;
        writeLine(id,"type",typeID,project,rowIndex,cellIndex,cell,-1,-1,(Cell)null,!load);
        writeLine(id,"name",cell.value,project,-1,-1,(Cell)null,-1,-1,(Cell)null,!load);
        getAssertedReconIDSet(typeID).add(cell.recon.id);
        newTopicVars.put(cell.recon.id,id);
      }
    }
 else {
      return null;
    }
    ensureAllIncludedTypesAsserted(cell.recon,typeID);
    if (subject != null) {
      ensureToTypesAsserted(cell.recon,predicate);
      writeLine(subject,predicate,id,project,subjectRowIndex,subjectCellIndex,subjectCell,objectRowIndex,objectCellIndex,objectCell,!load);
    }
    writeChildren(id,project,objectRowIndex,objectCellIndex,objectCell);
  }
  return id;
}
