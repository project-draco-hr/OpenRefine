{
  String optionsString=(params != null) ? params.getProperty("options") : null;
  JSONObject optionsTemp=null;
  if (optionsString != null) {
    try {
      optionsTemp=ParsingUtilities.evaluateJsonStringToObject(optionsString);
    }
 catch (    JSONException e) {
    }
  }
  final JSONObject options=optionsTemp;
  final boolean outputColumnHeaders=options == null ? true : JSONUtilities.getBoolean(options,"outputColumnHeaders",true);
  final boolean outputEmptyRows=options == null ? false : JSONUtilities.getBoolean(options,"outputBlankRows",true);
  final int limit=options == null ? -1 : JSONUtilities.getInt(options,"limit",-1);
  final List<String> columnNames;
  final Map<String,CellFormatter> columnNameToFormatter=new HashMap<String,CustomizableTabularExporterUtilities.CellFormatter>();
  JSONArray columnOptionArray=options == null ? null : JSONUtilities.getArray(options,"columns");
  if (columnOptionArray == null) {
    List<Column> columns=project.columnModel.columns;
    columnNames=new ArrayList<String>(columns.size());
    for (    Column column : columns) {
      String name=column.getName();
      columnNames.add(name);
      columnNameToFormatter.put(name,new CellFormatter());
    }
  }
 else {
    int count=columnOptionArray.length();
    columnNames=new ArrayList<String>(count);
    for (int i=0; i < count; i++) {
      JSONObject columnOptions=JSONUtilities.getObjectElement(columnOptionArray,i);
      if (columnOptions != null) {
        String name=JSONUtilities.getString(columnOptions,"name",null);
        if (name != null) {
          columnNames.add(name);
          columnNameToFormatter.put(name,new CellFormatter(columnOptions));
        }
      }
    }
  }
  RowVisitor visitor=new RowVisitor(){
    int rowCount=0;
    @Override public void start(    Project project){
      serializer.startFile(options);
      if (outputColumnHeaders) {
        List<CellData> cells=new ArrayList<TabularSerializer.CellData>(columnNames.size());
        for (        String name : columnNames) {
          cells.add(new CellData(name,name,name,null));
        }
        serializer.addRow(cells,true);
      }
    }
    @Override public boolean visit(    Project project,    int rowIndex,    Row row){
      List<CellData> cells=new ArrayList<TabularSerializer.CellData>(columnNames.size());
      int nonNullCount=0;
      for (      String columnName : columnNames) {
        Column column=project.columnModel.getColumnByName(columnName);
        CellFormatter formatter=columnNameToFormatter.get(columnName);
        CellData cellData=formatter.format(project,column,row.getCell(column.getCellIndex()));
        cells.add(cellData);
        if (cellData != null) {
          nonNullCount++;
        }
      }
      if (nonNullCount > 0 || outputEmptyRows) {
        serializer.addRow(cells,false);
        rowCount++;
      }
      return limit > 0 && rowCount >= limit;
    }
    @Override public void end(    Project project){
      serializer.endFile();
    }
  }
;
  FilteredRows filteredRows=engine.getAllFilteredRows();
  filteredRows.accept(project,visitor);
}
