{
  JSONObject reconSettings=JSONUtilities.getObject(options,"reconSettings");
  if (reconSettings != null) {
    String reconOutputString=JSONUtilities.getString(reconSettings,"output",null);
    if ("entity-name".equals(reconOutputString)) {
      recon_outputMode=ReconOutputMode.ENTITY_NAME;
    }
 else     if ("entity-id".equals(reconOutputString)) {
      recon_outputMode=ReconOutputMode.ENTITY_ID;
    }
 else     if ("cell-content".equals(reconOutputString)) {
      recon_outputMode=ReconOutputMode.CELL_CONTENT;
    }
    recon_blankUnmatchedCells=JSONUtilities.getBoolean(reconSettings,"blankUnmatchedCells",recon_blankUnmatchedCells);
    recon_linkToEntityPages=JSONUtilities.getBoolean(reconSettings,"linkToEntityPages",recon_linkToEntityPages);
  }
  JSONObject dateSettings=JSONUtilities.getObject(options,"dateSettings");
  if (dateSettings != null) {
    String dateFormatString=JSONUtilities.getString(dateSettings,"format",null);
    if ("iso-8601".equals(dateFormatString)) {
      date_formatMode=DateFormatMode.ISO_8601;
    }
 else     if ("locale-short".equals(dateFormatString)) {
      date_formatMode=DateFormatMode.SHORT_LOCALE;
    }
 else     if ("locale-medium".equals(dateFormatString)) {
      date_formatMode=DateFormatMode.MEDIUM_LOCALE;
    }
 else     if ("locale-long".equals(dateFormatString)) {
      date_formatMode=DateFormatMode.LONG_LOCALE;
    }
 else     if ("locale-full".equals(dateFormatString)) {
      date_formatMode=DateFormatMode.FULL_LOCALE;
    }
 else     if ("custom".equals(dateFormatString)) {
      date_formatMode=DateFormatMode.CUSTOM;
    }
    date_custom=JSONUtilities.getString(dateSettings,"custom",null);
    date_useLocalTimeZone=JSONUtilities.getBoolean(dateSettings,"useLocalTimeZone",date_useLocalTimeZone);
    date_omitTime=JSONUtilities.getBoolean(dateSettings,"omitTime",date_omitTime);
    if (date_formatMode == DateFormatMode.CUSTOM && (date_custom == null || date_custom.isEmpty())) {
      date_formatMode=DateFormatMode.ISO_8601;
    }
  }
switch (date_formatMode) {
case SHORT_LOCALE:
    dateFormatter=date_omitTime ? SimpleDateFormat.getDateInstance(SimpleDateFormat.SHORT) : SimpleDateFormat.getDateTimeInstance(SimpleDateFormat.SHORT,SimpleDateFormat.SHORT);
  break;
case MEDIUM_LOCALE:
dateFormatter=date_omitTime ? SimpleDateFormat.getDateInstance(SimpleDateFormat.MEDIUM) : SimpleDateFormat.getDateTimeInstance(SimpleDateFormat.MEDIUM,SimpleDateFormat.MEDIUM);
break;
case LONG_LOCALE:
dateFormatter=date_omitTime ? SimpleDateFormat.getDateInstance(SimpleDateFormat.LONG) : SimpleDateFormat.getDateTimeInstance(SimpleDateFormat.LONG,SimpleDateFormat.LONG);
break;
case FULL_LOCALE:
dateFormatter=date_omitTime ? SimpleDateFormat.getDateInstance(SimpleDateFormat.FULL) : SimpleDateFormat.getDateTimeInstance(SimpleDateFormat.FULL,SimpleDateFormat.FULL);
break;
case CUSTOM:
dateFormatter=new SimpleDateFormat(date_custom);
break;
default :
dateFormatter=date_omitTime ? new SimpleDateFormat("yyyy-MM-dd") : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
}
if (!date_useLocalTimeZone) {
dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
}
}
