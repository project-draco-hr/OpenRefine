{
  Gridworks.info("Importing " + fileName + "");
  if (fileName.endsWith(".zip") || fileName.endsWith(".tar.gz") || fileName.endsWith(".tgz")|| fileName.endsWith(".tar.bz2")) {
    File file=save(inputStream);
    HashMap<String,Integer> ext_map=new HashMap<String,Integer>();
    InputStream is=getStream(fileName,new FileInputStream(file));
    try {
      if (is instanceof TarInputStream) {
        TarInputStream tis=(TarInputStream)is;
        TarEntry te;
        while ((te=tis.getNextEntry()) != null) {
          if (!te.isDirectory()) {
            mapExtension(te.getName(),ext_map);
          }
        }
      }
 else       if (is instanceof ZipInputStream) {
        ZipInputStream zis=(ZipInputStream)is;
        ZipEntry ze;
        while ((ze=zis.getNextEntry()) != null) {
          if (!ze.isDirectory()) {
            mapExtension(ze.getName(),ext_map);
          }
        }
      }
    }
  finally {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
    List<Entry<String,Integer>> values=new ArrayList<Entry<String,Integer>>(ext_map.entrySet());
    Collections.sort(values,new ValuesComparator());
    if (values.size() == 0) {
      throw new RuntimeException("The archive contains no files.");
    }
    HashSet<String> exts=new HashSet<String>();
    Entry<String,Integer> most_frequent=values.get(0);
    Entry<String,Integer> second_most_frequent=values.get(1);
    if (most_frequent.getValue() > second_most_frequent.getValue()) {
      exts.add(most_frequent.getKey());
    }
 else {
      int winning_frequency=most_frequent.getValue();
      for (      Entry<String,Integer> e : values) {
        if (e.getValue() == winning_frequency) {
          exts.add(e.getKey());
        }
      }
    }
    Gridworks.log("Most frequent extensions: " + exts.toString());
    is=getStream(fileName,new FileInputStream(file));
    SafeInputStream sis=new SafeInputStream(is);
    try {
      if (is instanceof TarInputStream) {
        TarInputStream tis=(TarInputStream)is;
        TarEntry te;
        while ((te=tis.getNextEntry()) != null) {
          if (!te.isDirectory()) {
            String name=te.getName();
            String ext=getExtension(name)[1];
            if (exts.contains(ext)) {
              internalImportFile(project,options,name,sis);
            }
          }
        }
      }
 else       if (is instanceof ZipInputStream) {
        ZipInputStream zis=(ZipInputStream)is;
        ZipEntry ze;
        while ((ze=zis.getNextEntry()) != null) {
          if (!ze.isDirectory()) {
            String name=ze.getName();
            String ext=getExtension(name)[1];
            if (exts.contains(ext)) {
              internalImportFile(project,options,name,sis);
            }
          }
        }
      }
    }
  finally {
      try {
        sis.reallyClose();
      }
 catch (      IOException e) {
      }
    }
  }
 else   if (fileName.endsWith(".gz")) {
    internalImportFile(project,options,getExtension(fileName)[0],new GZIPInputStream(inputStream));
  }
 else   if (fileName.endsWith(".bz2")) {
    internalImportFile(project,options,getExtension(fileName)[0],new CBZip2InputStream(inputStream));
  }
 else {
    load(project,options,fileName,inputStream);
  }
}
