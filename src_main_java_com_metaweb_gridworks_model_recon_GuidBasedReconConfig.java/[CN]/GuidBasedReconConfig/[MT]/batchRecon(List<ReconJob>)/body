{
  List<Recon> recons=new ArrayList<Recon>(jobs.size());
  Map<String,Recon> guidToRecon=new HashMap<String,Recon>();
  try {
    String query=null;
{
      StringWriter stringWriter=new StringWriter();
      JSONWriter jsonWriter=new JSONWriter(stringWriter);
      jsonWriter.object();
      jsonWriter.key("query");
      jsonWriter.array();
      jsonWriter.object();
      jsonWriter.key("id");
      jsonWriter.value(null);
      jsonWriter.key("name");
      jsonWriter.value(null);
      jsonWriter.key("guid");
      jsonWriter.value(null);
      jsonWriter.key("type");
      jsonWriter.array();
      jsonWriter.endArray();
      jsonWriter.key("guid|=");
      jsonWriter.array();
      for (      ReconJob job : jobs) {
        jsonWriter.value(((GuidBasedReconJob)job).guid);
      }
      jsonWriter.endArray();
      jsonWriter.endObject();
      jsonWriter.endArray();
      jsonWriter.endObject();
      query=stringWriter.toString();
    }
    StringBuffer sb=new StringBuffer();
    sb.append(s_mqlreadService + "?query=");
    sb.append(ParsingUtilities.encode(query));
    URL url=new URL(sb.toString());
    URLConnection connection=url.openConnection();
    connection.setConnectTimeout(5000);
    connection.connect();
    InputStream is=connection.getInputStream();
    try {
      String s=ParsingUtilities.inputStreamToString(is);
      JSONObject o=ParsingUtilities.evaluateJsonStringToObject(s);
      JSONArray results=o.getJSONArray("result");
      int count=results.length();
      for (int i=0; i < count; i++) {
        JSONObject result=results.getJSONObject(i);
        String guid=result.getString("guid");
        JSONArray types=result.getJSONArray("type");
        String[] typeIDs=new String[types.length()];
        for (int j=0; j < typeIDs.length; j++) {
          typeIDs[j]=types.getString(j);
        }
        ReconCandidate candidate=new ReconCandidate(result.getString("id"),guid,result.getString("name"),typeIDs,100);
        Recon recon=new Recon();
        recon.addCandidate(candidate);
        recon.match=candidate;
        recon.judgment=Judgment.Matched;
        guidToRecon.put(guid,recon);
      }
    }
  finally {
      is.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (int i=0; i < jobs.size(); i++) {
    String guid=((GuidBasedReconJob)jobs.get(i)).guid;
    Recon recon=guidToRecon.get(guid);
    recons.add(recon);
  }
  return recons;
}
