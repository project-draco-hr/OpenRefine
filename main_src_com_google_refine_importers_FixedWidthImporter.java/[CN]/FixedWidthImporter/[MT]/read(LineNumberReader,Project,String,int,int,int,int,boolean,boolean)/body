{
  int[] columnWidths=null;
  columnWidths=getColumnWidthsFromString(sep);
  if (columnWidths.length < 2)   splitIntoColumns=false;
  List<String> columnNames=new ArrayList<String>();
  String line=null;
  int rowsWithData=0;
  try {
    while ((line=lnReader.readLine()) != null) {
      if (ignoreLines > 0) {
        ignoreLines--;
        continue;
      }
 else       if (StringUtils.isBlank(line)) {
        continue;
      }
      if (headerLines > 0) {
        headerLines--;
        ArrayList<String> cells=getCells(line,columnWidths,splitIntoColumns);
        for (int c=0; c < cells.size(); c++) {
          String cell=cells.get(c).trim();
          ImporterUtilities.appendColumnName(columnNames,c,cell);
        }
      }
 else {
        Row row=new Row(columnNames.size());
        ArrayList<String> cells=getCells(line,columnWidths,splitIntoColumns);
        if (cells != null && cells.size() > 0)         rowsWithData++;
        if (skip <= 0 || rowsWithData > skip) {
          for (          String s : cells) {
            if (ExpressionUtils.isNonBlankData(s)) {
              Serializable value=guessValueType ? ImporterUtilities.parseCellValue(s) : s;
              row.cells.add(new Cell(value,null));
            }
 else {
              row.cells.add(null);
            }
          }
          project.rows.add(row);
          project.columnModel.setMaxCellIndex(row.cells.size());
          ImporterUtilities.ensureColumnsInRowExist(columnNames,row);
          if (limit > 0 && project.rows.size() >= limit) {
            break;
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ImportException("The fixed width importer could not read the next line",e);
  }
  ImporterUtilities.setupColumns(project,columnNames);
}
