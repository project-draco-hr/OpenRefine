{
  Graph graph;
  try {
switch (mode) {
case NT:
      graph=rdfReader.parseNTriples(input);
    break;
case N3:
  graph=rdfReader.parseN3(input);
break;
case RDFXML:
graph=rdfReader.parseRdfXml(input);
break;
default :
throw new IllegalArgumentException("Unknown parsing mode");
}
}
 catch (Exception e) {
exceptions.add(e);
return;
}
ClosableIterable<Triple> triples=graph.find(ANY_SUBJECT_NODE,ANY_PREDICATE_NODE,ANY_OBJECT_NODE);
try {
Map<String,List<Row>> subjectToRows=new HashMap<String,List<Row>>();
Column subjectColumn=new Column(project.columnModel.allocateNewCellIndex(),"subject");
project.columnModel.addColumn(0,subjectColumn,false);
project.columnModel.setKeyColumnIndex(0);
for (Triple triple : triples) {
String subject=triple.getSubject().toString();
String predicate=triple.getPredicate().toString();
String object=triple.getObject().toString();
Column column=project.columnModel.getColumnByName(predicate);
if (column == null) {
column=new Column(project.columnModel.allocateNewCellIndex(),predicate);
project.columnModel.addColumn(-1,column,true);
}
int cellIndex=column.getCellIndex();
if (subjectToRows.containsKey(subject)) {
List<Row> rows=subjectToRows.get(subject);
for (Row row : rows) {
if (!ExpressionUtils.isNonBlankData(row.getCellValue(cellIndex))) {
row.setCell(cellIndex,new Cell(object,null));
object=null;
break;
}
}
if (object != null) {
Row row=new Row(project.columnModel.getMaxCellIndex() + 1);
rows.add(row);
row.setCell(cellIndex,new Cell(object,null));
}
}
 else {
List<Row> rows=new ArrayList<Row>();
subjectToRows.put(subject,rows);
Row row=new Row(project.columnModel.getMaxCellIndex() + 1);
rows.add(row);
row.setCell(subjectColumn.getCellIndex(),new Cell(subject,null));
row.setCell(cellIndex,new Cell(object,null));
}
}
for (Entry<String,List<Row>> entry : subjectToRows.entrySet()) {
project.rows.addAll(entry.getValue());
}
}
 catch (ModelException e) {
exceptions.add(e);
}
 finally {
triples.iterator().close();
}
}
