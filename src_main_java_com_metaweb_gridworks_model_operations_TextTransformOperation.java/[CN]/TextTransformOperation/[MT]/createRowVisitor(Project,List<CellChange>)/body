{
  Evaluable eval=new Parser(_expression).getExpression();
  Properties bindings=ExpressionUtils.createBindings(project);
  return new RowVisitor(){
    int cellIndex;
    Properties bindings;
    List<CellChange> cellChanges;
    Evaluable eval;
    public RowVisitor init(    int cellIndex,    Properties bindings,    List<CellChange> cellChanges,    Evaluable eval){
      this.cellIndex=cellIndex;
      this.bindings=bindings;
      this.cellChanges=cellChanges;
      this.eval=eval;
      return this;
    }
    @Override public boolean visit(    Project project,    int rowIndex,    Row row,    boolean contextual){
      if (cellIndex < row.cells.size()) {
        Cell cell=row.cells.get(cellIndex);
        if (cell.value != null) {
          ExpressionUtils.bind(bindings,row,cell);
          Cell newCell=new Cell(eval.evaluate(bindings),cell.recon);
          CellChange cellChange=new CellChange(rowIndex,cellIndex,cell,newCell);
          cellChanges.add(cellChange);
        }
      }
      return false;
    }
  }
.init(_cellIndex,bindings,cellChanges,eval);
}
