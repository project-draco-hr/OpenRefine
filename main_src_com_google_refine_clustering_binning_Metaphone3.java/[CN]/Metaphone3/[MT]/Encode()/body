{
  flag_AL_inversion=false;
  m_current=0;
  m_primary.setLength(0);
  m_secondary.setLength(0);
  if (m_length < 1) {
    return;
  }
  m_last=m_length - 1;
  while (!(m_primary.length() > m_metaphLength) && !(m_secondary.length() > m_metaphLength)) {
    if (m_current >= m_length) {
      break;
    }
switch (CharAt(m_current)) {
case 'B':
      Encode_B();
    break;
case '?':
case '?':
  MetaphAdd("S");
m_current++;
break;
case 'C':
Encode_C();
break;
case 'D':
Encode_D();
break;
case 'F':
Encode_F();
break;
case 'G':
Encode_G();
break;
case 'H':
Encode_H();
break;
case 'J':
Encode_J();
break;
case 'K':
Encode_K();
break;
case 'L':
Encode_L();
break;
case 'M':
Encode_M();
break;
case 'N':
Encode_N();
break;
case '?':
MetaphAdd("N");
m_current++;
break;
case 'P':
Encode_P();
break;
case 'Q':
Encode_Q();
break;
case 'R':
Encode_R();
break;
case 'S':
Encode_S();
break;
case 'T':
Encode_T();
break;
case '?':
case '?':
MetaphAdd("0");
m_current++;
break;
case 'V':
Encode_V();
break;
case 'W':
Encode_W();
break;
case 'X':
Encode_X();
break;
case '?':
MetaphAdd("X");
m_current++;
break;
case '?':
MetaphAdd("S");
m_current++;
break;
case 'Z':
Encode_Z();
break;
default :
if (IsVowel(CharAt(m_current))) {
Encode_Vowels();
break;
}
m_current++;
}
}
if (m_primary.length() > m_metaphLength) {
m_primary.setLength(m_metaphLength);
}
if (m_secondary.length() > m_metaphLength) {
m_secondary.setLength(m_metaphLength);
}
if ((m_primary.toString()).equals(m_secondary.toString())) {
m_secondary.setLength(0);
}
}
