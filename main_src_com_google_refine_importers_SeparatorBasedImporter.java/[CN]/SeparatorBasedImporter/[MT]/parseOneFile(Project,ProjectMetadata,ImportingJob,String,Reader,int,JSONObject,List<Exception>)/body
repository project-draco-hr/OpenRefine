{
  String sep=JSONUtilities.getString(options,"separator","\t");
  if (sep == null || "".equals(sep)) {
    sep="\t";
  }
  boolean processQuotes=JSONUtilities.getBoolean(options,"processQuotes",true);
  final CSVParser parser=new CSVParser(sep.toCharArray()[0],CSVParser.DEFAULT_QUOTE_CHARACTER,(char)0,CSVParser.DEFAULT_STRICT_QUOTES,CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,!processQuotes);
  final LineNumberReader lnReader=new LineNumberReader(reader);
  TableDataReader dataReader=new TableDataReader(){
    @Override public List<Object> getNextRowOfCells() throws IOException {
      String line=lnReader.readLine();
      if (line == null) {
        return null;
      }
 else {
        return getCells(line,parser,lnReader);
      }
    }
  }
;
  TabularImportingParserBase.readTable(project,metadata,job,dataReader,fileSource,limit,options,exceptions);
}
