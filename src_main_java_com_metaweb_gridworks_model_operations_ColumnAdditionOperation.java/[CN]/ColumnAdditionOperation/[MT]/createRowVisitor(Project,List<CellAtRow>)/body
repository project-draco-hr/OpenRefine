{
  Evaluable eval=new Parser(_expression).getExpression();
  Properties bindings=ExpressionUtils.createBindings(project);
  return new RowVisitor(){
    int cellIndex;
    Properties bindings;
    List<CellAtRow> cellsAtRows;
    Evaluable eval;
    public RowVisitor init(    int cellIndex,    Properties bindings,    List<CellAtRow> cellsAtRows,    Evaluable eval){
      this.cellIndex=cellIndex;
      this.bindings=bindings;
      this.cellsAtRows=cellsAtRows;
      this.eval=eval;
      return this;
    }
    @Override public boolean visit(    Project project,    int rowIndex,    Row row){
      if (cellIndex < row.cells.size()) {
        Cell cell=row.cells.get(cellIndex);
        if (cell.value != null) {
          ExpressionUtils.bind(bindings,row,cell);
          Cell newCell=new Cell(eval.evaluate(bindings),null);
          cellsAtRows.add(new CellAtRow(rowIndex,newCell));
        }
      }
      return false;
    }
  }
.init(_baseCellIndex,bindings,cellsAtRows,eval);
}
