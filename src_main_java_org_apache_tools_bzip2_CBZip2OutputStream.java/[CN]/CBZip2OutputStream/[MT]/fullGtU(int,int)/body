{
  int k;
  char c1, c2;
  int s1, s2;
  c1=block[i1 + 1];
  c2=block[i2 + 1];
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1=block[i1 + 1];
  c2=block[i2 + 1];
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1=block[i1 + 1];
  c2=block[i2 + 1];
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1=block[i1 + 1];
  c2=block[i2 + 1];
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1=block[i1 + 1];
  c2=block[i2 + 1];
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  c1=block[i1 + 1];
  c2=block[i2 + 1];
  if (c1 != c2) {
    return (c1 > c2);
  }
  i1++;
  i2++;
  k=last + 1;
  do {
    c1=block[i1 + 1];
    c2=block[i2 + 1];
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1=quadrant[i1];
    s2=quadrant[i2];
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    c1=block[i1 + 1];
    c2=block[i2 + 1];
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1=quadrant[i1];
    s2=quadrant[i2];
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    c1=block[i1 + 1];
    c2=block[i2 + 1];
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1=quadrant[i1];
    s2=quadrant[i2];
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    c1=block[i1 + 1];
    c2=block[i2 + 1];
    if (c1 != c2) {
      return (c1 > c2);
    }
    s1=quadrant[i1];
    s2=quadrant[i2];
    if (s1 != s2) {
      return (s1 > s2);
    }
    i1++;
    i2++;
    if (i1 > last) {
      i1-=last;
      i1--;
    }
    ;
    if (i2 > last) {
      i2-=last;
      i2--;
    }
    ;
    k-=4;
    workDone++;
  }
 while (k >= 0);
  return false;
}
