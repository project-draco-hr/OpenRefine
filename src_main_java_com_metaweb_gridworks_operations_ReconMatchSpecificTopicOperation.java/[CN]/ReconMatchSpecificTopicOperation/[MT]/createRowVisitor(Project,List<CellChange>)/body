{
  Column column=project.columnModel.getColumnByName(_columnName);
  return new RowVisitor(){
    int cellIndex;
    List<CellChange> cellChanges;
    Map<Long,Recon> dupReconMap=new HashMap<Long,Recon>();
    public RowVisitor init(    int cellIndex,    List<CellChange> cellChanges){
      this.cellIndex=cellIndex;
      this.cellChanges=cellChanges;
      return this;
    }
    public boolean visit(    Project project,    int rowIndex,    Row row,    boolean includeContextual,    boolean includeDependent){
      Cell cell=row.getCell(cellIndex);
      if (cell != null) {
        long reconID=cell.recon != null ? cell.recon.id : 0;
        Recon newRecon;
        if (dupReconMap.containsKey(reconID)) {
          newRecon=dupReconMap.get(reconID);
          newRecon.judgmentBatchSize++;
        }
 else {
          newRecon=cell.recon != null ? cell.recon.dup() : new Recon();
          newRecon.match=match;
          newRecon.matchRank=-1;
          newRecon.judgment=Judgment.Matched;
          newRecon.judgmentAction="mass";
          newRecon.judgmentBatchSize=1;
          dupReconMap.put(reconID,newRecon);
        }
        Cell newCell=new Cell(cell.value,newRecon);
        CellChange cellChange=new CellChange(rowIndex,cellIndex,cell,newCell);
        cellChanges.add(cellChange);
      }
      return false;
    }
  }
.init(column.getCellIndex(),cellChanges);
}
