{
  _min=Double.POSITIVE_INFINITY;
  _max=Double.NEGATIVE_INFINITY;
  List<Double> allValues=new ArrayList<Double>();
  iterate(project,columnName,cellIndex,eval,allValues);
  _numbericValueCount=allValues.size();
  if (_min >= _max) {
    _step=1;
    _min=Math.min(_min,_max);
    _max=_step;
    _bins=new int[1];
    return;
  }
  double diff=_max - _min;
  _step=1;
  if (diff > 10) {
    while (_step * 100 < diff) {
      _step*=10;
    }
  }
 else {
    while (_step * 100 > diff) {
      _step/=10;
    }
  }
  double originalMax=_max;
  _min=(Math.floor(_min / _step) * _step);
  _max=(Math.ceil(_max / _step) * _step);
  double binCount=(_max - _min) / _step;
  if (binCount > 100) {
    _step*=2;
    binCount=(binCount + 1) / 2;
  }
  if (_max <= originalMax) {
    _max+=_step;
    binCount++;
  }
  _bins=new int[(int)Math.round(binCount)];
  for (  double d : allValues) {
    int bin=Math.max((int)Math.floor((d - _min) / _step),0);
    _bins[bin]++;
  }
}
