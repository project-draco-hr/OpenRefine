{
  if (importer instanceof ReaderImporter) {
    InputStream inputStream=rawInputStream;
    if (!inputStream.markSupported()) {
      inputStream=new BufferedInputStream(rawInputStream);
    }
    CharsetDetector detector=new CharsetDetector();
    detector.setDeclaredEncoding("utf8");
    options.setProperty("encoding_confidence","0");
    InputStreamReader reader=null;
    CharsetMatch[] charsetMatches=detector.setText(inputStream).detectAll();
    for (    CharsetMatch charsetMatch : charsetMatches) {
      String matchName=charsetMatch.getName();
      int confidence=charsetMatch.getConfidence();
      if (confidence >= 20) {
        logger.info("Encoding guess: {} [confidence: {}]",matchName,confidence);
        try {
          reader=new InputStreamReader(inputStream,matchName);
        }
 catch (        UnsupportedEncodingException e) {
          logger.debug("Unsupported InputStreamReader charset encoding: {} [confidence: {}]; skipping",matchName,confidence);
          continue;
        }
        options.setProperty("encoding_confidence",Integer.toString(confidence));
        break;
      }
 else {
        logger.debug("Poor encoding guess: {} [confidence: {}]; skipping",matchName,confidence);
      }
    }
    if (reader == null) {
      if (encoding != null) {
        reader=new InputStreamReader(inputStream,encoding);
      }
 else {
        reader=new InputStreamReader(inputStream);
      }
    }
    options.setProperty("encoding",reader.getEncoding());
    ((ReaderImporter)importer).read(reader,project,metadata,options);
  }
 else {
    if (encoding != null) {
      options.setProperty("encoding",encoding);
    }
    options.setProperty("encoding_confidence","0");
    ((StreamImporter)importer).read(rawInputStream,project,metadata,options);
  }
}
