{
  int ignoreLines=ImporterUtilities.getIntegerOption("ignore",options,-1);
  int headerLines=ImporterUtilities.getIntegerOption("header-lines",options,1);
  int limit=ImporterUtilities.getIntegerOption("limit",options,-1);
  int skip=ImporterUtilities.getIntegerOption("skip",options,0);
  Workbook wb=null;
  try {
    wb=_xmlBased ? new XSSFWorkbook(inputStream) : new HSSFWorkbook(new POIFSFileSystem(inputStream));
  }
 catch (  IOException e) {
    throw new ImportException("Attempted to parse as an Excel file but failed. " + "Try to use Excel to re-save the file as a different Excel version or as TSV and upload again.",e);
  }
catch (  ArrayIndexOutOfBoundsException e) {
    throw new ImportException("Attempted to parse file as an Excel file but failed. " + "This is probably caused by a corrupt excel file, or due to the file having previously been created or saved by a non-Microsoft application. " + "Please try opening the file in Microsoft Excel and resaving it, then try re-uploading the file. "+ "See https://issues.apache.org/bugzilla/show_bug.cgi?id=48261 for further details",e);
  }
  Sheet sheet=wb.getSheetAt(0);
  int firstRow=sheet.getFirstRowNum();
  int lastRow=sheet.getLastRowNum();
  List<String> columnNames=new ArrayList<String>();
  Set<String> columnNameSet=new HashSet<String>();
  Map<String,Integer> columnRootNameToIndex=new HashMap<String,Integer>();
  int rowsWithData=0;
  Map<String,Recon> reconMap=new HashMap<String,Recon>();
  for (int r=firstRow; r <= lastRow; r++) {
    org.apache.poi.ss.usermodel.Row row=sheet.getRow(r);
    if (row == null) {
      continue;
    }
 else     if (ignoreLines > 0) {
      ignoreLines--;
      continue;
    }
    short firstCell=row.getFirstCellNum();
    short lastCell=row.getLastCellNum();
    if (firstCell < 0 || firstCell > lastCell) {
      continue;
    }
    if (headerLines > 0) {
      headerLines--;
      for (int c=firstCell; c <= lastCell; c++) {
        org.apache.poi.ss.usermodel.Cell cell=row.getCell(c);
        if (cell != null) {
          Serializable value=extractCell(cell);
          String text=value != null ? value.toString() : null;
          if (text != null && text.length() > 0) {
            while (columnNames.size() < c + 1) {
              columnNames.add(null);
            }
            String existingName=columnNames.get(c);
            String name=(existingName == null) ? text : (existingName + " " + text);
            columnNames.set(c,name);
          }
        }
      }
      if (headerLines == 0) {
        for (int i=0; i < columnNames.size(); i++) {
          String rootName=columnNames.get(i);
          if (rootName == null) {
            continue;
          }
          setUnduplicatedColumnName(rootName,columnNames,i,columnNameSet,columnRootNameToIndex);
        }
      }
    }
 else {
      Row newRow=new Row(columnNames.size());
      boolean hasData=false;
      for (int c=firstCell; c <= lastCell; c++) {
        org.apache.poi.ss.usermodel.Cell cell=row.getCell(c);
        if (cell == null) {
          continue;
        }
        Cell ourCell=extractCell(cell,reconMap);
        if (ourCell != null) {
          while (columnNames.size() < c + 1) {
            columnNames.add(null);
          }
          if (columnNames.get(c) == null) {
            setUnduplicatedColumnName("Column",columnNames,c,columnNameSet,columnRootNameToIndex);
          }
          newRow.setCell(c,ourCell);
          hasData=true;
        }
      }
      if (hasData) {
        rowsWithData++;
        if (skip <= 0 || rowsWithData > skip) {
          project.rows.add(newRow);
          project.columnModel.setMaxCellIndex(newRow.cells.size());
          if (limit > 0 && project.rows.size() >= limit) {
            break;
          }
        }
      }
    }
  }
  for (int c=0; c < columnNames.size(); c++) {
    String name=columnNames.get(c);
    if (name != null) {
      Column column=new Column(c,name);
      project.columnModel.columns.add(column);
    }
  }
}
