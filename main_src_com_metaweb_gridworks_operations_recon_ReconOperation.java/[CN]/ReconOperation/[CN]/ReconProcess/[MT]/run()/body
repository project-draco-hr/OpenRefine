{
  try {
    populateEntries();
  }
 catch (  Exception e2) {
    e2.printStackTrace();
  }
  Map<Integer,JobGroup> jobKeyToGroup=new HashMap<Integer,JobGroup>();
  for (  ReconEntry entry : _entries) {
    ReconJob job=_reconConfig.createJob(_project,entry.rowIndex,_project.rows.get(entry.rowIndex),_columnName,entry.cell);
    int key=job.getKey();
    JobGroup group=jobKeyToGroup.get(key);
    if (group == null) {
      group=new JobGroup(job);
      jobKeyToGroup.put(key,group);
    }
    group.entries.add(entry);
  }
  List<CellChange> cellChanges=new ArrayList<CellChange>(_entries.size());
  List<JobGroup> groups=new ArrayList<JobGroup>(jobKeyToGroup.values());
  int batchSize=_reconConfig.getBatchSize();
  for (int i=0; i < groups.size(); i+=batchSize) {
    int to=Math.min(i + batchSize,groups.size());
    List<ReconJob> jobs=new ArrayList<ReconJob>(to - i);
    for (int j=i; j < to; j++) {
      jobs.add(groups.get(j).job);
    }
    List<Recon> recons=_reconConfig.batchRecon(jobs,_historyEntryID);
    for (int j=i; j < to; j++) {
      Recon recon=recons.get(j - i);
      List<ReconEntry> entries=groups.get(j).entries;
      if (recon != null) {
        recon.judgmentBatchSize=entries.size();
      }
      for (      ReconEntry entry : entries) {
        Cell oldCell=entry.cell;
        Cell newCell=new Cell(oldCell.value,recon);
        CellChange cellChange=new CellChange(entry.rowIndex,_cellIndex,oldCell,newCell);
        cellChanges.add(cellChange);
      }
    }
    _progress=i * 100 / groups.size();
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
      if (_canceled) {
        break;
      }
    }
  }
  if (!_canceled) {
    Change reconChange=new ReconChange(cellChanges,_columnName,_reconConfig,null);
    HistoryEntry historyEntry=ProjectManager.singleton.createHistoryEntry(_historyEntryID,_project,_description,ReconOperation.this,reconChange);
    _project.history.addEntry(historyEntry);
    _project.processManager.onDoneProcess(this);
  }
}
