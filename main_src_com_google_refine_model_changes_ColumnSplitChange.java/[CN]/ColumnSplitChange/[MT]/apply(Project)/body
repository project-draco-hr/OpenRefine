{
synchronized (project) {
    if (_firstNewCellIndex < 0) {
      _firstNewCellIndex=project.columnModel.allocateNewCellIndex();
      for (int i=1; i < _columnNames.size(); i++) {
        project.columnModel.allocateNewCellIndex();
      }
      _column=project.columnModel.getColumnByName(_columnName);
      _columnIndex=project.columnModel.getColumnIndexByName(_columnName);
      _oldRows=new ArrayList<Row>(_rowIndices.size());
      _newRows=new ArrayList<Row>(_rowIndices.size());
      int cellIndex=_column.getCellIndex();
      for (int i=0; i < _rowIndices.size(); i++) {
        int r=_rowIndices.get(i);
        List<Serializable> tuple=_tuples.get(i);
        Row oldRow=project.rows.get(r);
        Row newRow=oldRow.dup();
        _oldRows.add(oldRow);
        _newRows.add(newRow);
        for (int c=0; c < tuple.size(); c++) {
          Serializable value=tuple.get(c);
          if (value != null) {
            newRow.setCell(_firstNewCellIndex + c,new Cell(value,null));
          }
        }
        if (_removeOriginalColumn) {
          newRow.setCell(cellIndex,null);
        }
      }
    }
    int columnGroupCount=project.columnModel.columnGroups.size();
    int columnCountChange=_columnNames.size() - (_removeOriginalColumn ? 1 : 0);
    _oldColumnGroups=new ArrayList<ColumnGroup>(columnGroupCount);
    for (int i=columnGroupCount - 1; i >= 0; i--) {
      ColumnGroup columnGroup=project.columnModel.columnGroups.get(i);
      _oldColumnGroups.add(columnGroup);
      if (columnGroup.startColumnIndex <= _columnIndex) {
        if (columnGroup.startColumnIndex + columnGroup.columnSpan > _columnIndex) {
          if (columnGroup.keyColumnIndex == _columnIndex) {
            if (_removeOriginalColumn) {
              project.columnModel.columnGroups.remove(i);
            }
 else {
              project.columnModel.columnGroups.set(i,new ColumnGroup(columnGroup.startColumnIndex,columnGroup.columnSpan + columnCountChange,columnGroup.keyColumnIndex));
            }
          }
 else {
            project.columnModel.columnGroups.set(i,new ColumnGroup(columnGroup.startColumnIndex,columnGroup.columnSpan + columnCountChange,columnGroup.keyColumnIndex < _columnIndex ? columnGroup.keyColumnIndex : (columnGroup.keyColumnIndex + columnCountChange)));
          }
        }
      }
 else {
        project.columnModel.columnGroups.set(i,new ColumnGroup(columnGroup.startColumnIndex + columnCountChange,columnGroup.columnSpan,columnGroup.keyColumnIndex + columnCountChange));
      }
    }
    for (int i=0; i < _rowIndices.size(); i++) {
      int r=_rowIndices.get(i);
      Row newRow=_newRows.get(i);
      project.rows.set(r,newRow);
    }
    for (int i=0; i < _columnNames.size(); i++) {
      String name=_columnNames.get(i);
      int cellIndex=_firstNewCellIndex + i;
      Column column=new Column(cellIndex,name);
      project.columnModel.columns.add(_columnIndex + 1 + i,column);
    }
    if (_removeOriginalColumn) {
      project.columnModel.columns.remove(_columnIndex);
    }
    project.update();
  }
}
