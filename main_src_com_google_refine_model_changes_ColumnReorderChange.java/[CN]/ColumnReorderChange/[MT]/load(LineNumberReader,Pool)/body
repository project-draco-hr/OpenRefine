{
  List<String> columnNames=new ArrayList<String>();
  List<Column> oldColumns=new ArrayList<Column>();
  List<Column> newColumns=new ArrayList<Column>();
  List<ColumnGroup> oldColumnGroups=null;
  String line;
  while ((line=reader.readLine()) != null && !"/ec/".equals(line)) {
    int equal=line.indexOf('=');
    CharSequence field=line.subSequence(0,equal);
    if ("columnNameCount".equals(field)) {
      int count=Integer.parseInt(line.substring(equal + 1));
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line != null) {
          columnNames.add(line);
        }
      }
    }
 else     if ("oldColumnCount".equals(field)) {
      int count=Integer.parseInt(line.substring(equal + 1));
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line != null) {
          oldColumns.add(Column.load(line));
        }
      }
    }
 else     if ("newColumnCount".equals(field)) {
      int count=Integer.parseInt(line.substring(equal + 1));
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line != null) {
          newColumns.add(Column.load(line));
        }
      }
    }
 else     if ("oldColumnGroupCount".equals(field)) {
      int oldColumnGroupCount=Integer.parseInt(line.substring(equal + 1));
      oldColumnGroups=readOldColumnGroups(reader,oldColumnGroupCount);
    }
  }
  ColumnReorderChange change=new ColumnReorderChange(columnNames);
  change._oldColumns=oldColumns;
  change._newColumns=newColumns;
  change._oldColumnGroups=oldColumnGroups != null ? oldColumnGroups : new LinkedList<ColumnGroup>();
  return change;
}
