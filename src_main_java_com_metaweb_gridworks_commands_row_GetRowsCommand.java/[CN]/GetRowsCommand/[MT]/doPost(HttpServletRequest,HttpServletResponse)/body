{
  try {
    Project project=getProject(request);
    Engine engine=getEngine(request,project);
    int start=Math.min(project.rows.size(),Math.max(0,getIntegerParameter(request,"start",0)));
    int limit=Math.min(project.rows.size() - start,Math.max(0,getIntegerParameter(request,"limit",20)));
    Pool pool=new Pool();
    Properties options=new Properties();
    options.put("project",project);
    options.put("reconCandidateOmitTypes",true);
    options.put("pool",pool);
    response.setCharacterEncoding("UTF-8");
    response.setHeader("Content-Type","application/json");
    JSONWriter writer=new JSONWriter(response.getWriter());
    writer.object();
    RowWritingVisitor rwv=new RowWritingVisitor(start,limit,writer,options);
    JSONObject sortingJson=null;
    try {
      String json=request.getParameter("sorting");
      sortingJson=(json == null) ? null : ParsingUtilities.evaluateJsonStringToObject(json);
    }
 catch (    JSONException e) {
    }
    if (engine.getMode() == Mode.RowBased) {
      FilteredRows filteredRows=engine.getAllFilteredRows();
      RowVisitor visitor=rwv;
      if (sortingJson != null) {
        SortingRowVisitor srv=new SortingRowVisitor(visitor);
        srv.initializeFromJSON(project,sortingJson);
        visitor=srv;
      }
      writer.key("mode");
      writer.value("row-based");
      writer.key("rows");
      writer.array();
      filteredRows.accept(project,visitor);
      writer.endArray();
      writer.key("filtered");
      writer.value(rwv.total);
      writer.key("total");
      writer.value(project.rows.size());
    }
 else {
      FilteredRecords filteredRecords=engine.getFilteredRecords();
      RecordVisitor visitor=rwv;
      if (sortingJson != null) {
        SortingRecordVisitor srv=new SortingRecordVisitor(visitor);
        srv.initializeFromJSON(project,sortingJson);
        visitor=srv;
      }
      writer.key("mode");
      writer.value("record-based");
      writer.key("rows");
      writer.array();
      filteredRecords.accept(project,visitor);
      writer.endArray();
      writer.key("filtered");
      writer.value(rwv.total);
      writer.key("total");
      writer.value(project.recordModel.getRecordCount());
    }
    writer.key("start");
    writer.value(start);
    writer.key("limit");
    writer.value(limit);
    writer.key("pool");
    pool.write(writer,options);
    writer.endObject();
  }
 catch (  Exception e) {
    respondException(response,e);
  }
}
