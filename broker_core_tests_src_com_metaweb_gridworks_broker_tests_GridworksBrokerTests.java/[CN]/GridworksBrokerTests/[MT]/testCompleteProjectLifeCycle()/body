{
  try {
    String project="proj4";
    String user="testuser";
    String user2="testuser2";
    String data="blah";
    String metadata="{}";
    String rev="0";
    logger.info("--- obtain ALL lock on project ---");
    JSONObject result=success(broker,request,response,OBTAIN_LOCK,"pid",project,"uid",user,"locktype",Integer.toString(ALL),"lockvalue","");
    assertJSON(result,"uid",user);
    String lock=result.getString("lock");
    logger.info("--- start project ---");
    success(broker,request,response,START,"pid",project,"uid",user,"lock",lock,"data",data,"metadata",metadata,"rev",rev);
    logger.info("--- verify project state contains lock ---");
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev",rev);
    JSONArray locks=result.getJSONArray("locks");
    Assert.assertEquals(locks.length(),1);
    JSONObject l=locks.getJSONObject(0);
    assertJSON(l,"uid","testuser");
    Assert.assertEquals(l.getInt("type"),ALL);
    logger.info("--- release ALL lock on project ---");
    success(broker,request,response,RELEASE_LOCK,"pid",project,"uid",user,"lock",lock);
    logger.info("--- verify no locks are present ---");
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev",rev);
    locks=result.getJSONArray("locks");
    Assert.assertEquals(locks.length(),0);
    logger.info("--- open project and verify data was loaded correctly ---");
    result=success(broker,request,response,OPEN,"pid",project,"uid",user,"rev",rev);
    JSONArray result_data=result.getJSONArray("data");
    Assert.assertEquals(result_data.length(),data.getBytes("UTF-8").length);
    JSONArray tt;
    JSONObject t;
    logger.info("--- obtain column lock ---");
    String column="1";
    result=success(broker,request,response,OBTAIN_LOCK,"pid",project,"uid",user,"locktype",Integer.toString(COL),"lockvalue",column);
    String col_lock=result.getString("lock");
    logger.info("--- perform column transformation ---");
    t=new JSONObject();
    t.put("op_type",COL);
    t.put("op_value",column);
    t.put("value",new JSONObject());
    tt=new JSONArray();
    tt.put(t);
    result=success(broker,request,response,TRANSFORM,"pid",project,"uid",user,"lock",col_lock,"transformations",tt.toString());
    logger.info("--- make sure transformation was recorded properly ---");
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev","0");
    tt=result.getJSONArray("transformations");
    Assert.assertEquals(tt.length(),1);
    t=tt.getJSONObject(0);
    assertJSON(t,"op_value",column);
    logger.info("--- make sure revision numbers in state management work as expected ---");
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev","1");
    tt=result.getJSONArray("transformations");
    Assert.assertEquals(tt.length(),0);
    logger.info("--- perform cell transformation ---");
    String cell="1";
    t=new JSONObject();
    t.put("op_type",CELL);
    t.put("op_value",column + "," + cell);
    t.put("value",new JSONObject());
    tt=new JSONArray();
    tt.put(t);
    result=success(broker,request,response,TRANSFORM,"pid",project,"uid",user,"lock",col_lock,"transformations",tt.toString());
    logger.info("--- make sure transformation was recorded properly ---");
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev","0");
    tt=result.getJSONArray("transformations");
    Assert.assertEquals(tt.length(),2);
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev","1");
    tt=result.getJSONArray("transformations");
    Assert.assertEquals(tt.length(),1);
    t=tt.getJSONObject(0);
    assertJSON(t,"op_value",column + "," + cell);
    logger.info("--- make sure another user fails to acquire ALL lock ---");
    failure(broker,request,response,OBTAIN_LOCK,"pid",project,"uid",user2,"locktype",Integer.toString(ALL),"lockvalue","");
    logger.info("--- make sure another user fails to acquire COL lock on the same column ---");
    failure(broker,request,response,OBTAIN_LOCK,"pid",project,"uid",user2,"locktype",Integer.toString(COL),"lockvalue",column);
    logger.info("--- make sure another user manages to acquire COL lock on another column ---");
    String column2="2";
    result=success(broker,request,response,OBTAIN_LOCK,"pid",project,"uid",user2,"locktype",Integer.toString(COL),"lockvalue",column2);
    String col_lock2=result.getString("lock");
    logger.info("--- make sure that both locks are present ---");
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev","2");
    locks=result.getJSONArray("locks");
    Assert.assertEquals(locks.length(),2);
    logger.info("--- make sure we can't escalate our current COL lock to an ALL lock ---");
    failure(broker,request,response,OBTAIN_LOCK,"pid",project,"uid",user,"locktype",Integer.toString(ALL),"lockvalue","");
    logger.info("--- release column locks ---");
    success(broker,request,response,RELEASE_LOCK,"pid",project,"uid",user,"lock",col_lock);
    success(broker,request,response,RELEASE_LOCK,"pid",project,"uid",user2,"lock",col_lock2);
    logger.info("--- make sure the project has no locks ---");
    result=success(broker,request,response,GET_STATE,"pid",project,"uid",user,"rev","2");
    locks=result.getJSONArray("locks");
    Assert.assertEquals(locks.length(),0);
  }
 catch (  Exception e) {
    Assert.fail();
  }
}
