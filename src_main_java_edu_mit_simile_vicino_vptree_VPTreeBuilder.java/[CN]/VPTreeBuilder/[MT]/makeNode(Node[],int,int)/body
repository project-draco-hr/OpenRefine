{
  int delta=end - begin;
  int middle=begin + (delta / 2);
  if (DEBUG)   System.out.println("\ndelta: " + delta);
  TNode vpNode=new TNode(nodes[begin + getRandomIndex(delta)].get());
  if (DEBUG)   System.out.println("\nvp-node: " + vpNode.get().toString());
  calculateDistances(vpNode,nodes,begin,end);
  orderDistances(nodes,begin,end);
  if (DEBUG) {
    System.out.println("delta: " + delta);
    System.out.println("middle: " + middle);
    for (int i=begin; i <= end; i++) {
      System.out.println(" +-- " + nodes[i].getDistance() + " --> "+ nodes[i].get());
    }
  }
  TNode node=new TNode(nodes[middle].get());
  node.setMedian(nodes[middle].getDistance());
  if (DEBUG)   System.out.println("\n-node: " + node.get().toString());
  if ((middle - 1) - begin > 0) {
    node.setLeft(makeNode(nodes,begin,middle - 1));
  }
 else   if ((middle - 1) - begin == 0) {
    TNode nodeLeft=new TNode(nodes[begin].get());
    nodeLeft.setMedian(nodes[begin].getDistance());
    node.setLeft(nodeLeft);
  }
  if (end - (middle + 1) > 0) {
    node.setRight(makeNode(nodes,middle + 1,end));
  }
 else   if (end - (middle + 1) == 0) {
    TNode nodeRight=new TNode(nodes[end].get());
    nodeRight.setMedian(nodes[end].getDistance());
    node.setRight(new TNode(nodes[end].get()));
  }
  return node;
}
