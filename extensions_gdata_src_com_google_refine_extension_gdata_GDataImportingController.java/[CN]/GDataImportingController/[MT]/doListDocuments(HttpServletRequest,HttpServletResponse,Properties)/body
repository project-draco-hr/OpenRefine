{
  String token=TokenCookie.getToken(request);
  if (token == null) {
    HttpUtilities.respond(response,"error","Not authorized");
    return;
  }
  Writer w=response.getWriter();
  JSONWriter writer=new JSONWriter(w);
  try {
    writer.object();
    writer.key("documents");
    writer.array();
    try {
      DocsService service=getDocsService(token);
      URL metafeedUrl=new URL("https://spreadsheets.google.com/feeds/spreadsheets/private/full");
      SpreadsheetFeed feed=service.getFeed(metafeedUrl,SpreadsheetFeed.class);
      for (      SpreadsheetEntry entry : feed.getEntries()) {
        writer.object();
        writer.key("docId");
        writer.value(entry.getId());
        writer.key("docLink");
        writer.value(entry.getHtmlLink().getHref());
        writer.key("docSelfLink");
        writer.value(entry.getSelfLink().getHref());
        writer.key("title");
        writer.value(entry.getTitle().getPlainText());
        DateTime updated=entry.getUpdated();
        if (updated != null) {
          writer.key("updated");
          writer.value(updated.toStringRfc822());
        }
        writer.key("authors");
        writer.array();
        for (        Person person : entry.getAuthors()) {
          writer.value(person.getName());
        }
        writer.endArray();
        writer.endObject();
      }
    }
 catch (    ServiceException e) {
      e.printStackTrace();
    }
    writer.endArray();
    writer.endObject();
  }
 catch (  JSONException e) {
    throw new ServletException(e);
  }
 finally {
    w.flush();
    w.close();
  }
}
