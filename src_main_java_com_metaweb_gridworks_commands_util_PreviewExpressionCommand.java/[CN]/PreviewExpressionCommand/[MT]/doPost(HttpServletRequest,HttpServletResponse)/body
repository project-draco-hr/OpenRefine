{
  try {
    Project project=getProject(request);
    int cellIndex=Integer.parseInt(request.getParameter("cellIndex"));
    String expression=request.getParameter("expression");
    String rowIndicesString=request.getParameter("rowIndices");
    if (rowIndicesString == null) {
      respond(response,"{ \"code\" : \"error\", \"message\" : \"No row indices specified\" }");
      return;
    }
    boolean repeat="true".equals(request.getParameter("repeat"));
    int repeatCount=10;
    if (repeat) {
      String repeatCountString=request.getParameter("repeatCount");
      try {
        repeatCount=Math.max(Math.min(Integer.parseInt(repeatCountString),10),0);
      }
 catch (      Exception e) {
      }
    }
    response.setCharacterEncoding("UTF-8");
    response.setHeader("Content-Type","application/json");
    JSONArray rowIndices=ParsingUtilities.evaluateJsonStringToArray(rowIndicesString);
    int length=rowIndices.length();
    JSONWriter writer=new JSONWriter(response.getWriter());
    writer.object();
    try {
      Evaluable eval=MetaParser.parse(expression);
      writer.key("code");
      writer.value("ok");
      writer.key("results");
      writer.array();
      Properties bindings=ExpressionUtils.createBindings(project);
      for (int i=0; i < length; i++) {
        Object result=null;
        int rowIndex=rowIndices.getInt(i);
        if (rowIndex >= 0 && rowIndex < project.rows.size()) {
          Row row=project.rows.get(rowIndex);
          Cell cell=row.getCell(cellIndex);
          try {
            ExpressionUtils.bind(bindings,row,rowIndex,cell);
            result=eval.evaluate(bindings);
            if (repeat) {
              for (int r=0; r < repeatCount && ExpressionUtils.isStorable(result); r++) {
                Cell newCell=new Cell((Serializable)result,(cell != null) ? cell.recon : null);
                ExpressionUtils.bind(bindings,row,rowIndex,newCell);
                Object newResult=eval.evaluate(bindings);
                if (ExpressionUtils.isError(newResult)) {
                  break;
                }
 else                 if (ExpressionUtils.sameValue(result,newResult)) {
                  break;
                }
 else {
                  result=newResult;
                }
              }
            }
          }
 catch (          Exception e) {
          }
        }
        if (result != null && (result.getClass().isArray() || result instanceof List<?>)) {
          writer.array();
          if (result.getClass().isArray()) {
            for (            Object v : (Object[])result) {
              writeValue(writer,v);
            }
          }
 else {
            for (            Object v : ExpressionUtils.toObjectList(result)) {
              writeValue(writer,v);
            }
          }
          writer.endArray();
        }
 else {
          writeValue(writer,result);
        }
      }
      writer.endArray();
    }
 catch (    ParsingException e) {
      writer.key("code");
      writer.value("error");
      writer.key("type");
      writer.value("parser");
      writer.key("message");
      writer.value(e.getMessage());
    }
catch (    Exception e) {
      writer.key("code");
      writer.value("error");
      writer.key("type");
      writer.value("other");
      writer.key("message");
      writer.value(e.getMessage());
    }
    writer.endObject();
  }
 catch (  Exception e) {
    respondException(response,e);
  }
}
