{
  String columnName=null;
  List<String> columnNames=null;
  List<Integer> rowIndices=null;
  List<List<Serializable>> tuples=null;
  boolean removeOriginalColumn=false;
  Column column=null;
  int columnIndex=-1;
  int firstNewCellIndex=-1;
  List<Row> oldRows=null;
  List<Row> newRows=null;
  List<ColumnGroup> oldColumnGroups=null;
  String line;
  while ((line=reader.readLine()) != null && !"/ec/".equals(line)) {
    int equal=line.indexOf('=');
    CharSequence field=line.subSequence(0,equal);
    String value=line.substring(equal + 1);
    if ("columnName".equals(field)) {
      columnName=value;
    }
 else     if ("columnNameCount".equals(field)) {
      int count=Integer.parseInt(value);
      columnNames=new ArrayList<String>(count);
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line != null) {
          columnNames.add(line);
        }
      }
    }
 else     if ("rowIndexCount".equals(field)) {
      int count=Integer.parseInt(value);
      rowIndices=new ArrayList<Integer>(count);
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line != null) {
          rowIndices.add(Integer.parseInt(line));
        }
      }
    }
 else     if ("tupleCount".equals(field)) {
      int count=Integer.parseInt(value);
      tuples=new ArrayList<List<Serializable>>(count);
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line == null) {
          continue;
        }
        int valueCount=Integer.parseInt(line);
        List<Serializable> tuple=new ArrayList<Serializable>(valueCount);
        for (int r=0; r < valueCount; r++) {
          line=reader.readLine();
          JSONTokener t=new JSONTokener(line);
          Object o=t.nextValue();
          tuple.add((o != JSONObject.NULL) ? (Serializable)o : null);
        }
        tuples.add(tuple);
      }
    }
 else     if ("removeOriginalColumn".equals(field)) {
      removeOriginalColumn=Boolean.parseBoolean(value);
    }
 else     if ("column".equals(field)) {
      column=Column.load(value);
    }
 else     if ("columnIndex".equals(field)) {
      columnIndex=Integer.parseInt(value);
    }
 else     if ("firstNewCellIndex".equals(field)) {
      firstNewCellIndex=Integer.parseInt(value);
    }
 else     if ("oldRowCount".equals(field)) {
      int count=Integer.parseInt(value);
      oldRows=new ArrayList<Row>(count);
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line != null) {
          oldRows.add(Row.load(line,pool));
        }
      }
    }
 else     if ("newRowCount".equals(field)) {
      int count=Integer.parseInt(value);
      newRows=new ArrayList<Row>(count);
      for (int i=0; i < count; i++) {
        line=reader.readLine();
        if (line != null) {
          newRows.add(Row.load(line,pool));
        }
      }
    }
 else     if ("oldColumnGroupCount".equals(field)) {
      int oldColumnGroupCount=Integer.parseInt(line.substring(equal + 1));
      oldColumnGroups=ColumnChange.readOldColumnGroups(reader,oldColumnGroupCount);
    }
  }
  ColumnSplitChange change=new ColumnSplitChange(columnName,columnNames,rowIndices,tuples,removeOriginalColumn,column,columnIndex,firstNewCellIndex,oldRows,newRows);
  change._oldColumnGroups=oldColumnGroups != null ? oldColumnGroups : new LinkedList<ColumnGroup>();
  return change;
}
