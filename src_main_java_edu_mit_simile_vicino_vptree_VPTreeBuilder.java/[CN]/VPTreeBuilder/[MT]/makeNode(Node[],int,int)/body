{
  int delta=end - begin;
  if (DEBUG)   System.out.println("\ndelta: " + delta);
  if (delta == 0) {
    TNode vpNode=new TNode(nodes[begin].get());
    vpNode.setMedian(0);
    return vpNode;
  }
 else   if (delta < 0) {
    return null;
  }
  Node randomNode=nodes[begin + getRandomIndex(delta)];
  TNode vpNode=new TNode(randomNode.get());
  if (DEBUG)   System.out.println("\nvp-node: " + vpNode.get().toString());
  calculateDistances(vpNode,nodes,begin,end);
  orderDistances(nodes,begin,end);
  fixVantagPoint(randomNode,nodes,begin,end);
  if (DEBUG) {
    for (int i=begin; i <= end; i++) {
      System.out.println(" +-- " + nodes[i].getDistance() + " --> "+ nodes[i].get());
    }
  }
  float median=(float)median(nodes,begin,end);
  vpNode.setMedian(median);
  int i=0;
  for (i=begin + 1; i < end; i++) {
    if (nodes[i].getDistance() >= median) {
      vpNode.setLeft(makeNode(nodes,begin + 1,i - 1));
      break;
    }
  }
  vpNode.setRight(makeNode(nodes,i,end));
  return vpNode;
}
