{
  logger.trace("JsonImporter.read");
  PushbackInputStream pis=new PushbackInputStream(inputStream,BUFFER_SIZE);
  String[] recordPath=null;
{
    byte[] buffer=new byte[BUFFER_SIZE];
    int bytes_read=0;
    try {
      while (bytes_read < BUFFER_SIZE) {
        int c=pis.read(buffer,bytes_read,BUFFER_SIZE - bytes_read);
        if (c == -1)         break;
        bytes_read+=c;
      }
      pis.unread(buffer,0,bytes_read);
    }
 catch (    IOException e) {
      throw new ImportException("Read error",e);
    }
    InputStream iStream=new ByteArrayInputStream(buffer,0,bytes_read);
    TreeParser parser=new JSONParser(iStream);
    if (options.containsKey("importer-record-tag")) {
      try {
        recordPath=XmlImportUtilities.detectPathFromTag(parser,options.getProperty("importer-record-tag"));
      }
 catch (      Exception e) {
      }
    }
 else {
      recordPath=XmlImportUtilities.detectRecordElement(parser);
    }
  }
  if (recordPath == null)   return;
  ImportColumnGroup rootColumnGroup=new ImportColumnGroup();
  XmlImportUtilities.importTreeData(new XmlParser(pis),project,recordPath,rootColumnGroup);
  XmlImportUtilities.createColumnsFromImport(project,rootColumnGroup);
  project.columnModel.update();
}
