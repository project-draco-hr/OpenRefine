{
  logger.trace("> obtain lock");
  Lock lock=null;
  Lock blocker=null;
  Transaction txn=env.beginTransaction(null,null);
  try {
    EntityCursor<Lock> cursor=locksByProject.subIndex(pid).entities();
    try {
      if (locktype == ALL) {
        if (lockvalue.length() > 0) {
          throw new RuntimeException("Hmm, seems like you're calling an ALL with a specific value, are you sure you didn't want another type of lock?");
        }
        for (        Lock l : cursor) {
          if (!l.uid.equals(uid)) {
            blocker=l;
            break;
          }
 else {
            if (l.type == ALL) {
              lock=l;
              break;
            }
          }
        }
      }
 else       if (locktype == COL) {
        if (lockvalue.indexOf(',') > -1) {
          throw new RuntimeException("Hmm, seems like you're calling a COL lock with a CELL value");
        }
        for (        Lock l : cursor) {
          if (!l.uid.equals(uid)) {
            if (l.type == ALL || (l.type == COL && l.value.equals(lockvalue)) || (l.type == CELL && l.value.split(",")[0].equals(lockvalue))) {
              blocker=l;
              break;
            }
          }
 else {
            if (l.type == ALL || (l.type == COL && l.value.equals(lockvalue))) {
              lock=l;
              break;
            }
          }
        }
      }
 else       if (locktype == CELL) {
        if (lockvalue.indexOf(',') == -1) {
          throw new RuntimeException("Hmm, seems like you're calling a CELL lock without specifying row and column: format must be 'row,column'");
        }
        for (        Lock l : cursor) {
          if (!l.uid.equals(uid)) {
            if (l.type == ALL || (l.type == COL && l.value.equals(lockvalue.split(",")[0])) || (l.type == CELL && l.value.equals(lockvalue))) {
              blocker=l;
              break;
            }
          }
 else {
            if (l.type == ALL || (l.type == COL && l.value.equals(lockvalue.split(",")[0])) || (l.type == CELL && l.value.equals(lockvalue))) {
              lock=l;
              break;
            }
          }
        }
      }
    }
  finally {
      cursor.close();
    }
    if (blocker != null) {
      logger.info("found a blocking lock {}",lockToString(blocker));
      throw new RuntimeException("Can't obtain lock, it is blocked by a type '" + blocker.type + "' lock owned by '"+ blocker.uid+ "'");
    }
    if (lock == null) {
      logger.info("no comparable lock already exists, creating a new one");
      lock=new Lock(Long.toHexString(txn.getId()),pid,uid,locktype,lockvalue);
      lockById.put(txn,lock);
      txn.commit();
    }
  }
  finally {
    if (txn != null) {
      txn.abort();
      txn=null;
    }
  }
  JSONObject o=lockToJSON(lock,uid);
  o.put("status","ok");
  respond(response,o);
  logger.trace("< obtain lock");
}
