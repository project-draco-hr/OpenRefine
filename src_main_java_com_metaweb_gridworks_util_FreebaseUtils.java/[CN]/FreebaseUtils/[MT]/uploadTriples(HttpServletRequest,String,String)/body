{
  Provider provider=OAuthUtilities.getProvider(FREEBASE_HOST);
  Credentials credentials=Credentials.getCredentials(request,provider,Credentials.Type.ACCESS);
  JSONObject user_info=new JSONObject(getUserInfo(credentials,provider));
  if (user_info.has("username")) {
    List<NameValuePair> formparams=new ArrayList<NameValuePair>();
    formparams.add(new BasicNameValuePair("user",user_info.getString("username")));
    formparams.add(new BasicNameValuePair("action_type","LOAD_TRIPLE"));
    formparams.add(new BasicNameValuePair("operator","gridworks"));
    formparams.add(new BasicNameValuePair("mdo_info",info));
    formparams.add(new BasicNameValuePair("graphport",provider.getHost().equals(FREEBASE_HOST) ? "otg" : "sandbox"));
    formparams.add(new BasicNameValuePair("payload",triples));
    formparams.add(new BasicNameValuePair("check_params","false"));
    UrlEncodedFormEntity entity=new UrlEncodedFormEntity(formparams,"UTF-8");
    HttpPost httpRequest=new HttpPost(FREEQ_URL);
    httpRequest.setEntity(entity);
    HttpPost surrogateRequest=new HttpPost(getUserInfoURL(FREEBASE_HOST));
    surrogateRequest.setEntity(entity);
    OAuthConsumer consumer=OAuthUtilities.getConsumer(credentials,provider);
    consumer.sign(surrogateRequest);
    Header[] h=surrogateRequest.getHeaders("Authorization");
    if (h.length > 0) {
      httpRequest.setHeader("X-Freebase-Credentials",h[0].getValue());
    }
 else {
      throw new RuntimeException("Couldn't find the oauth signature header in the surrogate request");
    }
    HttpClient httpClient=new DefaultHttpClient();
    HttpResponse httpResponse=httpClient.execute(httpRequest);
    return EntityUtils.toString(httpResponse.getEntity());
  }
 else {
    throw new RuntimeException("Invalid credentials");
  }
}
