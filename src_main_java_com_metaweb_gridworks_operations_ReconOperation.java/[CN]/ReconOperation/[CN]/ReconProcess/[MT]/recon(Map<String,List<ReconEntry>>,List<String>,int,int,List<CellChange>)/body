{
  try {
    StringWriter stringWriter=new StringWriter();
    JSONWriter jsonWriter=new JSONWriter(stringWriter);
    jsonWriter.object();
    for (int i=0; from + i < to; i++) {
      jsonWriter.key("q" + i + ":search");
      jsonWriter.object();
      jsonWriter.key("query");
      jsonWriter.value(values.get(from + i));
      jsonWriter.key("limit");
      jsonWriter.value(3);
      jsonWriter.key("type");
      jsonWriter.value(_typeID);
      jsonWriter.key("type_strict");
      jsonWriter.value("should");
      jsonWriter.key("type_exclude");
      jsonWriter.value("/common/image");
      jsonWriter.key("domain_exclude");
      jsonWriter.value("/freebase");
      jsonWriter.endObject();
    }
    jsonWriter.endObject();
    StringBuffer sb=new StringBuffer();
    sb.append("http://api.freebase.com/api/service/search?indent=1&queries=");
    sb.append(ParsingUtilities.encode(stringWriter.toString()));
    URL url=new URL(sb.toString());
    URLConnection connection=url.openConnection();
    connection.setConnectTimeout(5000);
    connection.connect();
    InputStream is=connection.getInputStream();
    try {
      String s=ParsingUtilities.inputStreamToString(is);
      JSONObject o=ParsingUtilities.evaluateJsonStringToObject(s);
      for (int i=0; from + i < to; i++) {
        String value=values.get(from + i);
        String key="q" + i + ":search";
        if (!o.has(key)) {
          continue;
        }
        Recon recon;
        JSONObject o2=o.getJSONObject(key);
        if (o2.has("result")) {
          JSONArray results=o2.getJSONArray("result");
          recon=createRecon(value,results);
        }
 else {
          recon=new Recon();
        }
        for (        ReconEntry entry : valueToEntries.get(value)) {
          Cell oldCell=entry.cell;
          Cell newCell=new Cell(oldCell.value,recon);
          CellChange cellChange=new CellChange(entry.rowIndex,_cellIndex,oldCell,newCell);
          cellChanges.add(cellChange);
        }
        valueToEntries.remove(value);
      }
    }
  finally {
      is.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  List<ReconEntry> entries : valueToEntries.values()) {
    Recon recon=new Recon();
    for (    ReconEntry entry : entries) {
      Cell oldCell=entry.cell;
      Cell newCell=new Cell(oldCell.value,recon);
      CellChange cellChange=new CellChange(entry.rowIndex,_cellIndex,oldCell,newCell);
      cellChanges.add(cellChange);
    }
  }
  System.gc();
}
