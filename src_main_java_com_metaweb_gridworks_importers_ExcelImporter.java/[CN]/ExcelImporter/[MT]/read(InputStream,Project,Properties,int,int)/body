{
  Workbook wb=null;
  try {
    wb=_xmlBased ? new XSSFWorkbook(inputStream) : new HSSFWorkbook(new POIFSFileSystem(inputStream));
  }
 catch (  IOException e) {
    throw new IOException("Attempted to parse file as Excel file but failed. " + "Try to use Excel to re-save the file as a different Excel version or as TSV and upload again.",e);
  }
  Sheet sheet=wb.getSheetAt(0);
  int firstRow=sheet.getFirstRowNum();
  int lastRow=sheet.getLastRowNum();
  int r=firstRow;
  List<Integer> nonBlankIndices=null;
  List<String> nonBlankHeaderStrings=null;
  for (; r <= lastRow; r++) {
    org.apache.poi.ss.usermodel.Row row=sheet.getRow(r);
    if (row == null) {
      continue;
    }
    short firstCell=row.getFirstCellNum();
    short lastCell=row.getLastCellNum();
    if (firstCell >= 0 && firstCell <= lastCell) {
      nonBlankIndices=new ArrayList<Integer>(lastCell - firstCell + 1);
      nonBlankHeaderStrings=new ArrayList<String>(lastCell - firstCell + 1);
      for (int c=firstCell; c <= lastCell; c++) {
        org.apache.poi.ss.usermodel.Cell cell=row.getCell(c);
        if (cell != null) {
          String text=cell.getStringCellValue().trim();
          if (text.length() > 0) {
            nonBlankIndices.add((int)c);
            nonBlankHeaderStrings.add(text);
          }
        }
      }
      if (nonBlankIndices.size() > 0) {
        r++;
        break;
      }
    }
  }
  if (nonBlankIndices == null || nonBlankIndices.size() == 0) {
    return;
  }
  for (int c=0; c < nonBlankIndices.size(); c++) {
    Column column=new Column(c,nonBlankHeaderStrings.get(c));
    project.columnModel.columns.add(column);
  }
  int rowsWithData=0;
  for (; r <= lastRow; r++) {
    org.apache.poi.ss.usermodel.Row row=sheet.getRow(r);
    if (row == null) {
      continue;
    }
    short firstCell=row.getFirstCellNum();
    short lastCell=row.getLastCellNum();
    if (firstCell >= 0 && firstCell <= lastCell) {
      Row newRow=new Row(nonBlankIndices.size());
      boolean hasData=false;
      for (int c=0; c < nonBlankIndices.size(); c++) {
        if (c < firstCell || c > lastCell) {
          continue;
        }
        org.apache.poi.ss.usermodel.Cell cell=row.getCell(c);
        if (cell == null) {
          continue;
        }
        int cellType=cell.getCellType();
        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_ERROR || cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {
          continue;
        }
        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA) {
          cellType=cell.getCachedFormulaResultType();
        }
        Serializable value=null;
        if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN) {
          value=cell.getBooleanCellValue();
        }
 else         if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC) {
          value=cell.getNumericCellValue();
        }
 else {
          String text=cell.getStringCellValue().trim();
          if (text.length() > 0) {
            value=text;
          }
        }
        if (value != null) {
          newRow.setCell(c,new Cell(value,null));
          hasData=true;
        }
      }
      if (hasData) {
        rowsWithData++;
        if (skip <= 0 || rowsWithData > skip) {
          project.rows.add(newRow);
          project.columnModel.setMaxCellIndex(newRow.cells.size());
          if (limit > 0 && project.rows.size() >= limit) {
            break;
          }
        }
      }
    }
  }
}
