{
  boolean printColumnHeader=true;
  if (options != null && options.getProperty("printColumnHeader") != null) {
    printColumnHeader=Boolean.parseBoolean(options.getProperty("printColumnHeader"));
  }
  RowVisitor visitor=new RowVisitor(){
    CSVWriter csvWriter;
    boolean printColumnHeader=true;
    boolean isFirstRow=true;
    public RowVisitor init(    CSVWriter writer,    boolean printColumnHeader){
      this.csvWriter=writer;
      this.printColumnHeader=printColumnHeader;
      return this;
    }
    @Override public boolean visit(    Project project,    int rowIndex,    Row row){
      int size=project.columnModel.columns.size();
      String[] cols=new String[size];
      String[] vals=new String[size];
      int i=0;
      for (      Column col : project.columnModel.columns) {
        int cellIndex=col.getCellIndex();
        cols[i]=col.getName();
        Object value=row.getCellValue(cellIndex);
        if (value != null) {
          if (value instanceof String) {
            vals[i]=(String)value;
          }
 else           if (value instanceof Calendar) {
            vals[i]=ParsingUtilities.dateToString(((Calendar)value).getTime());
          }
 else           if (value instanceof Date) {
            vals[i]=ParsingUtilities.dateToString((Date)value);
          }
 else {
            vals[i]=value.toString();
          }
        }
        i++;
      }
      if (printColumnHeader && isFirstRow) {
        csvWriter.writeNext(cols,false);
        isFirstRow=false;
      }
      csvWriter.writeNext(vals,false);
      return false;
    }
    @Override public void start(    Project project){
    }
    @Override public void end(    Project project){
      try {
        csvWriter.close();
      }
 catch (      IOException e) {
        logger.error("CsvExporter could not close writer : " + e.getMessage());
      }
    }
  }
.init(new CSVWriter(writer,separator),printColumnHeader);
  FilteredRows filteredRows=engine.getAllFilteredRows();
  filteredRows.accept(project,visitor);
}
