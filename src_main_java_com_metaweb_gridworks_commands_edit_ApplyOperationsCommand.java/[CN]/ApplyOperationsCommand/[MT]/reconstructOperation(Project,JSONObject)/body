{
  try {
    String op=obj.getString("op");
    Class<? extends AbstractOperation> klass=OperationRegistry.s_opNameToClass.get(op);
    if (klass == null) {
      return;
    }
    Method reconstruct=klass.getMethod("reconstruct",Project.class,JSONObject.class);
    if (reconstruct == null) {
      return;
    }
    AbstractOperation operation=(AbstractOperation)reconstruct.invoke(null,project,obj);
    if (operation != null) {
      Process process=operation.createProcess(project,new Properties());
      project.processManager.queueProcess(process);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
