{
  Column column=project.columnModel.getColumnByName(_columnName);
  Evaluable eval=MetaParser.parse(_expression);
  Properties bindings=ExpressionUtils.createBindings(project);
  return new RowVisitor(){
    int cellIndex;
    Properties bindings;
    List<CellChange> cellChanges;
    Evaluable eval;
    public RowVisitor init(    int cellIndex,    Properties bindings,    List<CellChange> cellChanges,    Evaluable eval){
      this.cellIndex=cellIndex;
      this.bindings=bindings;
      this.cellChanges=cellChanges;
      this.eval=eval;
      return this;
    }
    public boolean visit(    Project project,    int rowIndex,    Row row,    boolean contextual){
      Cell cell=row.getCell(cellIndex);
      Object oldValue=cell != null ? cell.value : null;
      ExpressionUtils.bind(bindings,row,rowIndex,cell);
      Object newValue=eval.evaluate(bindings);
      if (ExpressionUtils.isError(newValue)) {
        if (_onError == OnError.KeepOriginal) {
          return false;
        }
 else         if (_onError == OnError.SetToBlank) {
          newValue=null;
        }
      }
      if (!ExpressionUtils.sameValue(oldValue,newValue)) {
        Cell newCell=new Cell(newValue,(cell != null) ? cell.recon : null);
        CellChange cellChange=new CellChange(rowIndex,cellIndex,cell,newCell);
        cellChanges.add(cellChange);
      }
      return false;
    }
  }
.init(column.getCellIndex(),bindings,cellChanges,eval);
}
