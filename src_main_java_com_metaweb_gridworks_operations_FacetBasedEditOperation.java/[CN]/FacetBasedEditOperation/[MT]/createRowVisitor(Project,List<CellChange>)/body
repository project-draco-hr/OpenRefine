{
  Column column=project.columnModel.getColumnByName(_columnName);
  Evaluable eval=MetaParser.parse(_expression);
  Properties bindings=ExpressionUtils.createBindings(project);
  Map<String,Object> fromTo=new HashMap<String,Object>();
  for (  Edit edit : _edits) {
    for (    String s : edit.from) {
      fromTo.put(s,edit.to);
    }
  }
  return new RowVisitor(){
    int cellIndex;
    Properties bindings;
    List<CellChange> cellChanges;
    Evaluable eval;
    Map<String,Object> fromTo;
    public RowVisitor init(    int cellIndex,    Properties bindings,    List<CellChange> cellChanges,    Evaluable eval,    Map<String,Object> fromTo){
      this.cellIndex=cellIndex;
      this.bindings=bindings;
      this.cellChanges=cellChanges;
      this.eval=eval;
      this.fromTo=fromTo;
      return this;
    }
    public boolean visit(    Project project,    int rowIndex,    Row row,    boolean contextual){
      Cell cell=row.getCell(cellIndex);
      ExpressionUtils.bind(bindings,row,rowIndex,cell);
      Object v=eval.evaluate(bindings);
      if (v != null) {
        String from=v.toString();
        Object to=fromTo.get(from);
        if (to != null) {
          Cell newCell=new Cell(to,(cell != null) ? cell.recon : null);
          CellChange cellChange=new CellChange(rowIndex,cellIndex,cell,newCell);
          cellChanges.add(cellChange);
        }
      }
      return false;
    }
  }
.init(column.getCellIndex(),bindings,cellChanges,eval,fromTo);
}
