{
  final int[] columnWidths=JSONUtilities.getIntArray(options,"columnWidths");
  List<Object> retrievedColumnNames=null;
  if (options.has("columnNames")) {
    String[] strings=JSONUtilities.getStringArray(options,"columnNames");
    if (strings.length > 0) {
      retrievedColumnNames=new ArrayList<Object>();
      for (      String s : strings) {
        s=s.trim();
        if (!s.isEmpty()) {
          retrievedColumnNames.add(s);
        }
      }
      if (retrievedColumnNames.size() > 0) {
        JSONUtilities.safePut(options,"headerLines",1);
      }
 else {
        retrievedColumnNames=null;
      }
    }
  }
  final List<Object> columnNames=retrievedColumnNames;
  final LineNumberReader lnReader=new LineNumberReader(reader);
  TableDataReader dataReader=new TableDataReader(){
    boolean usedColumnNames=false;
    @Override public List<Object> getNextRowOfCells() throws IOException {
      if (columnNames != null && !usedColumnNames) {
        usedColumnNames=true;
        return columnNames;
      }
 else {
        String line=lnReader.readLine();
        if (line == null) {
          return null;
        }
 else {
          return getCells(line,columnWidths);
        }
      }
    }
  }
;
  TabularImportingParserBase.readTable(project,metadata,job,dataReader,fileSource,limit,options,exceptions);
}
