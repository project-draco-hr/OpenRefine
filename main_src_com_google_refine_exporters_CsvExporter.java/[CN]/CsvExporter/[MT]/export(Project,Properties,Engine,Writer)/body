{
  String optionsString=(params == null) ? null : params.getProperty("options");
  JSONObject options=null;
  if (optionsString != null) {
    try {
      options=ParsingUtilities.evaluateJsonStringToObject(optionsString);
    }
 catch (    JSONException e) {
    }
  }
  final String separator=options == null ? Character.toString(this.separator) : JSONUtilities.getString(options,"separator",Character.toString(this.separator));
  final String lineSeparator=options == null ? CSVWriter.DEFAULT_LINE_END : JSONUtilities.getString(options,"lineSeparator",CSVWriter.DEFAULT_LINE_END);
  final boolean printColumnHeader=(params != null && params.getProperty("printColumnHeader") != null) ? Boolean.parseBoolean(params.getProperty("printColumnHeader")) : true;
  final CSVWriter csvWriter=new CSVWriter(writer,separator.charAt(0),CSVWriter.DEFAULT_QUOTE_CHARACTER,lineSeparator);
  TabularSerializer serializer=new TabularSerializer(){
    @Override public void startFile(    JSONObject options){
    }
    @Override public void endFile(){
    }
    @Override public void addRow(    List<CellData> cells,    boolean isHeader){
      if (!isHeader || printColumnHeader) {
        String[] strings=new String[cells.size()];
        for (int i=0; i < strings.length; i++) {
          CellData cellData=cells.get(i);
          strings[i]=(cellData != null && cellData.text != null) ? cellData.text : "";
        }
        csvWriter.writeNext(strings,false);
      }
    }
  }
;
  CustomizableTabularExporterUtilities.exportRows(project,engine,params,serializer);
  csvWriter.close();
}
