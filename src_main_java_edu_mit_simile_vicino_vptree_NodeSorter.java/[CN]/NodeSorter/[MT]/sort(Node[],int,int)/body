{
  if (lo >= hi) {
    return;
  }
  int mid=(lo + hi) / 2;
  if (nodes[lo].getDistance() > nodes[mid].getDistance()) {
    Node tmp=nodes[lo];
    nodes[lo]=nodes[mid];
    nodes[mid]=tmp;
  }
  if (nodes[mid].getDistance() > nodes[hi].getDistance()) {
    Node tmp=nodes[mid];
    nodes[mid]=nodes[hi];
    nodes[hi]=tmp;
    if (nodes[lo].getDistance() > nodes[mid].getDistance()) {
      Node tmp2=nodes[lo];
      nodes[lo]=nodes[mid];
      nodes[mid]=tmp2;
    }
  }
  int left=lo + 1;
  int right=hi - 1;
  if (left >= right) {
    return;
  }
  Node partition=nodes[mid];
  while (true) {
    while (nodes[right].getDistance() > partition.getDistance()) {
      --right;
    }
    while (left < right && nodes[left].getDistance() <= partition.getDistance()) {
      ++left;
    }
    if (left < right) {
      Node tmp=nodes[left];
      nodes[left]=nodes[right];
      nodes[right]=tmp;
      --right;
    }
 else {
      break;
    }
  }
  sort(nodes,lo,left);
  sort(nodes,left + 1,hi);
}
