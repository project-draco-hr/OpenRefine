{
  Map<String,TypeGroup> map=new HashMap<String,TypeGroup>();
  int cellIndex=column.getCellIndex();
  List<String> samples=new ArrayList<String>(s_sampleSize);
  Set<String> sampleSet=new HashSet<String>();
  for (  Row row : project.rows) {
    Object value=row.getCellValue(cellIndex);
    if (ExpressionUtils.isNonBlankData(value)) {
      String s=value.toString().trim();
      if (!sampleSet.contains(s)) {
        samples.add(s);
        sampleSet.add(s);
        if (samples.size() >= s_sampleSize) {
          break;
        }
      }
    }
  }
  StringWriter stringWriter=new StringWriter();
  try {
    JSONWriter jsonWriter=new JSONWriter(stringWriter);
    jsonWriter.object();
    for (int i=0; i < samples.size(); i++) {
      jsonWriter.key("q" + i);
      jsonWriter.object();
      jsonWriter.key("query");
      jsonWriter.value(samples.get(i));
      jsonWriter.key("limit");
      jsonWriter.value(3);
      jsonWriter.endObject();
    }
    jsonWriter.endObject();
  }
 catch (  JSONException e) {
  }
  String queriesString=stringWriter.toString();
  try {
    URL url=new URL(serviceUrl);
    URLConnection connection=url.openConnection();
{
      connection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
      connection.setConnectTimeout(30000);
      connection.setDoOutput(true);
      DataOutputStream dos=new DataOutputStream(connection.getOutputStream());
      try {
        String body="queries=" + ParsingUtilities.encode(queriesString);
        dos.writeBytes(body);
      }
  finally {
        dos.flush();
        dos.close();
      }
      connection.connect();
    }
    InputStream is=connection.getInputStream();
    try {
      String s=ParsingUtilities.inputStreamToString(is);
      JSONObject o=ParsingUtilities.evaluateJsonStringToObject(s);
      for (int i=0; i < samples.size(); i++) {
        String key="q" + i;
        if (!o.has(key)) {
          continue;
        }
        JSONObject o2=o.getJSONObject(key);
        if (!(o2.has("result"))) {
          continue;
        }
        JSONArray results=o2.getJSONArray("result");
        int count=results.length();
        for (int j=0; j < count; j++) {
          JSONObject result=results.getJSONObject(j);
          double score=1.0 / (1 + j);
          JSONArray types=result.getJSONArray("type");
          int typeCount=types.length();
          for (int t=0; t < typeCount; t++) {
            Object type=types.get(t);
            String typeID;
            String typeName;
            if (type instanceof String) {
              typeID=typeName=(String)type;
            }
 else {
              typeID=((JSONObject)type).getString("id");
              typeName=((JSONObject)type).getString("name");
            }
            double score2=score * (typeCount - t) / (double)typeCount;
            if (map.containsKey(typeID)) {
              TypeGroup tg=map.get(typeID);
              tg.score+=score2;
              tg.count++;
            }
 else {
              map.put(typeID,new TypeGroup(typeID,typeName,score2));
            }
          }
        }
      }
    }
  finally {
      is.close();
    }
  }
 catch (  Exception e) {
    logger.error("Failed to guess cell types for load\n" + queriesString,e);
  }
  List<TypeGroup> types=new ArrayList<TypeGroup>(map.values());
  Collections.sort(types,new Comparator<TypeGroup>(){
    public int compare(    TypeGroup o1,    TypeGroup o2){
      int c=Math.min(s_sampleSize,o2.count) - Math.min(s_sampleSize,o1.count);
      if (c != 0) {
        return c;
      }
      return (int)Math.signum(o2.score / o2.count - o1.score / o1.count);
    }
  }
);
  return types;
}
