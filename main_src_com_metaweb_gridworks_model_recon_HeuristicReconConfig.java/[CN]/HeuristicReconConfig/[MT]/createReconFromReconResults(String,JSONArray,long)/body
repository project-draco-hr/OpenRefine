{
  Recon recon=new Recon(historyEntryID);
  try {
    int length=results.length();
    int count=0;
    for (int i=0; i < length && count < 3; i++) {
      JSONObject result=results.getJSONObject(i);
      if (!result.has("name")) {
        continue;
      }
      String id=result.getString("id");
      JSONArray names=result.getJSONArray("name");
      double score=result.getDouble("score");
      JSONArray types=result.getJSONArray("type");
      String[] typeIDs=new String[types.length()];
      for (int j=0; j < typeIDs.length; j++) {
        typeIDs[j]=types.getString(j);
      }
      ReconCandidate candidate=new ReconCandidate(id,"#" + id.substring(6),names.getString(0),typeIDs,score);
      if (i == 0) {
        recon.setFeature(Recon.Feature_nameMatch,text.equalsIgnoreCase(candidate.topicName));
        recon.setFeature(Recon.Feature_nameLevenshtein,StringUtils.getLevenshteinDistance(text,candidate.topicName));
        recon.setFeature(Recon.Feature_nameWordDistance,wordDistance(text,candidate.topicName));
        recon.setFeature(Recon.Feature_typeMatch,false);
        for (        String typeID : candidate.typeIDs) {
          if (this.typeID.equals(typeID)) {
            recon.setFeature(Recon.Feature_typeMatch,true);
            if (autoMatch && result.has("match") && result.getBoolean("match")) {
              recon.match=candidate;
              recon.matchRank=0;
              recon.judgment=Judgment.Matched;
              recon.judgmentAction="auto";
            }
            break;
          }
        }
      }
      recon.addCandidate(candidate);
      count++;
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return recon;
}
