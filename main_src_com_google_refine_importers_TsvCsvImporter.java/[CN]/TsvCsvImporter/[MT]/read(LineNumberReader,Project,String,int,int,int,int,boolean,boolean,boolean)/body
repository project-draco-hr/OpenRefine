{
  CSVParser parser=(sep != null && sep.length() > 0 && splitIntoColumns) ? new CSVParser(sep.toCharArray()[0],CSVParser.DEFAULT_QUOTE_CHARACTER,(char)0,CSVParser.DEFAULT_STRICT_QUOTES,CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,ignoreQuotes) : null;
  List<String> columnNames=new ArrayList<String>();
  String line=null;
  int rowsWithData=0;
  while ((line=lnReader.readLine()) != null) {
    if (ignoreLines > 0) {
      ignoreLines--;
      continue;
    }
 else     if (StringUtils.isBlank(line)) {
      continue;
    }
    if (parser == null) {
      int tab=line.indexOf('\t');
      if (tab >= 0) {
        parser=new CSVParser('\t',CSVParser.DEFAULT_QUOTE_CHARACTER,(char)0,CSVParser.DEFAULT_STRICT_QUOTES,CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,ignoreQuotes);
      }
 else {
        parser=new CSVParser(',',CSVParser.DEFAULT_QUOTE_CHARACTER,(char)0,CSVParser.DEFAULT_STRICT_QUOTES,CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,ignoreQuotes);
      }
    }
    if (headerLines > 0) {
      headerLines--;
      ArrayList<String> cells=getCells(line,parser,lnReader,splitIntoColumns);
      for (int c=0; c < cells.size(); c++) {
        String cell=cells.get(c).trim();
        ImporterUtilities.appendColumnName(columnNames,c,cell);
      }
    }
 else {
      Row row=new Row(columnNames.size());
      ArrayList<String> cells=getCells(line,parser,lnReader,splitIntoColumns);
      if (cells != null && cells.size() > 0)       rowsWithData++;
      if (skip <= 0 || rowsWithData > skip) {
        for (        String s : cells) {
          if (ExpressionUtils.isNonBlankData(s)) {
            Serializable value=guessValueType ? ImporterUtilities.parseCellValue(s) : s;
            row.cells.add(new Cell(value,null));
          }
 else {
            row.cells.add(null);
          }
        }
        project.rows.add(row);
        project.columnModel.setMaxCellIndex(row.cells.size());
        ImporterUtilities.ensureColumnsInRowExist(columnNames,row);
        if (limit > 0 && project.rows.size() >= limit) {
          break;
        }
      }
    }
  }
  ImporterUtilities.setupColumns(project,columnNames);
}
