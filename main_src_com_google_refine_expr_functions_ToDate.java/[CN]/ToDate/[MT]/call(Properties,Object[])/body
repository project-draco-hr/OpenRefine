{
  if (args.length == 0) {
    return null;
  }
  Object arg0=args[0];
  String o1;
  if (arg0 instanceof Date) {
    return arg0;
  }
 else   if (arg0 instanceof Calendar) {
    return ((Calendar)arg0).getTime();
  }
 else   if (arg0 instanceof Long) {
    o1=((Long)arg0).toString();
  }
 else   if (arg0 instanceof String) {
    o1=(String)arg0;
  }
 else {
    return new EvalError("Not a String - cannot parse to date");
  }
  if (args.length == 1 || (args.length == 2 && args[1] instanceof Boolean)) {
    boolean month_first=true;
    if (args.length == 2) {
      month_first=(Boolean)args[1];
    }
    try {
      return CalendarParser.parse(o1,(month_first) ? CalendarParser.MM_DD_YY : CalendarParser.DD_MM_YY);
    }
 catch (    CalendarParserException e) {
      Date d=ParsingUtilities.stringToDate(o1);
      if (d != null) {
        return d;
      }
 else {
        try {
          return javax.xml.bind.DatatypeConverter.parseDateTime(o1).getTime();
        }
 catch (        IllegalArgumentException e2) {
        }
      }
      return new EvalError("Cannot parse to date");
    }
  }
  Locale locale=Locale.getDefault();
  if (args.length >= 2) {
    for (int i=1; i < args.length; i++) {
      if (!(args[i] instanceof String)) {
        continue;
      }
      String format=StringUtils.trim((String)args[i]);
      DateFormat formatter;
      if (i == 1) {
        Locale possibleLocale;
        int c=format.indexOf('_');
        if (c > 0) {
          possibleLocale=new Locale(format.substring(0,c),format.substring(c + 1));
        }
 else {
          possibleLocale=new Locale(format);
        }
        boolean valid=false;
        for (        Locale l : DateFormat.getAvailableLocales()) {
          if (l.equals(possibleLocale)) {
            locale=possibleLocale;
            valid=true;
            break;
          }
        }
        if (valid) {
          if (args.length == 2) {
            formatter=DateFormat.getDateInstance(DateFormat.DEFAULT,locale);
            formatter.setLenient(true);
            GregorianCalendar date=parse(o1,formatter);
            if (date != null) {
              return date;
            }
 else {
              return new EvalError("Unable to parse as date");
            }
          }
          continue;
        }
      }
      try {
        formatter=new SimpleDateFormat(format,locale);
      }
 catch (      IllegalArgumentException e) {
        return new EvalError("Unknown date format");
      }
      formatter.setLenient(true);
      GregorianCalendar date=parse(o1,formatter);
      if (date != null) {
        return date;
      }
    }
    return new EvalError("Unable to parse as date");
  }
  return null;
}
