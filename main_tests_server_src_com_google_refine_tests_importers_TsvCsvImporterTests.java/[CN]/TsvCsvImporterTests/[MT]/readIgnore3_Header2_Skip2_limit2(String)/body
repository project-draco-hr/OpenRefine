{
  String inputSeparator=sep == null ? "\t" : sep;
  String input="ignore1\n" + "ignore2\n" + "ignore3\n"+ "col1" + inputSeparator + "col2"+ inputSeparator+ "col3\n"+ "sub1"+ inputSeparator+ "sub2"+ inputSeparator+ "sub3\n"+ "skip1\n"+ "skip2\n"+ "data-row1-cell1"+ inputSeparator+ "data-row1-cell2"+ inputSeparator+ "data-row1-cell3\n"+ "data-row2-cell1"+ inputSeparator+ "data-row2-cell2"+ inputSeparator+ "\n"+ "data-row3-cell1"+ inputSeparator+ "data-row3-cell2"+ inputSeparator+ "data-row1-cell3";
  try {
    prepareOptions(sep,2,2,3,2,false,true,false);
    parseOneFile(SUT,new StringReader(input));
  }
 catch (  Exception e) {
    Assert.fail();
  }
  Assert.assertEquals(project.columnModel.columns.size(),3);
  Assert.assertEquals(project.columnModel.columns.get(0).getName(),"col1 sub1");
  Assert.assertEquals(project.columnModel.columns.get(1).getName(),"col2 sub2");
  Assert.assertEquals(project.columnModel.columns.get(2).getName(),"col3 sub3");
  Assert.assertEquals(project.rows.size(),2);
  Assert.assertEquals(project.rows.get(0).cells.size(),3);
  Assert.assertEquals(project.rows.get(0).cells.get(0).value,"data-row1-cell1");
  Assert.assertEquals(project.rows.get(0).cells.get(1).value,"data-row1-cell2");
  Assert.assertEquals(project.rows.get(0).cells.get(2).value,"data-row1-cell3");
  Assert.assertEquals(project.rows.get(1).cells.size(),3);
  Assert.assertEquals(project.rows.get(1).cells.get(0).value,"data-row2-cell1");
  Assert.assertEquals(project.rows.get(1).cells.get(1).value,"data-row2-cell2");
  Assert.assertNull(project.rows.get(1).cells.get(2));
}
