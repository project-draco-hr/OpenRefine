{
  Object o=args[0].evaluate(bindings);
  if (ExpressionUtils.isError(o)) {
    return o;
  }
 else   if (!ExpressionUtils.isArrayOrCollection(o) && !(o instanceof JSONArray)) {
    return new EvalError("First argument is not an array");
  }
  String name=((VariableExpr)args[1]).getName();
  Object oldValue=bindings.get(name);
  try {
    List<Object> results=null;
    if (o.getClass().isArray()) {
      Object[] values=(Object[])o;
      results=new ArrayList<Object>(values.length);
      for (      Object v : values) {
        bindings.put(name,v);
        Object r=args[2].evaluate(bindings);
        if (r instanceof Boolean && ((Boolean)r).booleanValue()) {
          results.add(v);
        }
      }
    }
 else     if (o instanceof JSONArray) {
      JSONArray a=(JSONArray)o;
      int l=a.length();
      results=new ArrayList<Object>(l);
      for (int i=0; i < l; i++) {
        try {
          Object v=a.get(i);
          bindings.put(name,v);
          Object r=args[2].evaluate(bindings);
          if (r instanceof Boolean && ((Boolean)r).booleanValue()) {
            results.add(v);
          }
        }
 catch (        JSONException e) {
          results.add(new EvalError(e.getMessage()));
        }
      }
    }
 else {
      Collection<Object> collection=ExpressionUtils.toObjectCollection(o);
      results=new ArrayList<Object>(collection.size());
      for (      Object v : collection) {
        bindings.put(name,v);
        Object r=args[2].evaluate(bindings);
        if (r instanceof Boolean && ((Boolean)r).booleanValue()) {
          results.add(v);
        }
      }
    }
    return results.toArray();
  }
  finally {
    if (oldValue != null) {
      bindings.put(name,oldValue);
    }
 else {
      bindings.remove(name);
    }
  }
}
