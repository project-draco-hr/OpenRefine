{
  return new RowVisitor(){
    int cellIndex;
    Properties bindings;
    List<CellAtRow> cellsAtRows;
    public RowVisitor init(    List<CellAtRow> cellsAtRows){
      Column column=_project.columnModel.getColumnByName(_baseColumnName);
      this.cellIndex=column.getCellIndex();
      this.bindings=ExpressionUtils.createBindings(_project);
      this.cellsAtRows=cellsAtRows;
      return this;
    }
    @Override public void start(    Project project){
    }
    @Override public void end(    Project project){
    }
    @Override public boolean visit(    Project project,    int rowIndex,    Row row){
      Cell cell=row.getCell(cellIndex);
      Cell newCell=null;
      ExpressionUtils.bind(bindings,row,rowIndex,_baseColumnName,cell);
      Object o=_eval.evaluate(bindings);
      if (o != null) {
        if (o instanceof Cell) {
          newCell=(Cell)o;
        }
 else         if (o instanceof WrappedCell) {
          newCell=((WrappedCell)o).cell;
        }
 else {
          Serializable v=ExpressionUtils.wrapStorable(o);
          if (ExpressionUtils.isNonBlankData(v)) {
            newCell=new Cell(v.toString(),null);
          }
        }
      }
      if (newCell != null) {
        cellsAtRows.add(new CellAtRow(rowIndex,newCell));
      }
      return false;
    }
  }
.init(cellsAtRows);
}
