{
  if (logger.isDebugEnabled()) {
    logger.debug("> process '{}'",path);
  }
 else {
    logger.info("process '{}'",path);
  }
  response.setCharacterEncoding("UTF-8");
  response.setHeader("Content-Type","application/json");
  try {
    String uid=getUserId(request);
    logger.debug("uid: {}",uid);
    String pid=getParameter(request,"pid");
    logger.debug("pid: {}",pid);
    if ("get_state".equals(path)) {
      getState(response,pid,uid,getInteger(request,"rev"));
    }
 else     if ("expire".equals(path)) {
      expire(response);
    }
 else     if ("obtain_lock".equals(path)) {
      obtainLock(response,pid,uid,getInteger(request,"locktype"),getParameter(request,"lockvalue"));
    }
 else     if ("release_lock".equals(path)) {
      releaseLock(response,pid,uid,getParameter(request,"lock"));
    }
 else     if ("transform".equals(path)) {
      addTransformations(response,pid,uid,getParameter(request,"lock"),getList(request,"transformations"));
    }
 else     if ("start".equals(path)) {
      startProject(response,pid,uid,getParameter(request,"lock"),getData(request),getParameter(request,"metadata"),getInteger(request,"rev"));
    }
 else     if ("open".equals(path)) {
      openProject(response,pid);
    }
 else {
      boolean value=super.process(path,request,response);
      if (logger.isDebugEnabled())       logger.debug("< process '{}'",path);
      return value;
    }
  }
 catch (  RuntimeException e) {
    logger.error("runtime error",e.getMessage());
    respondError(response,e.getMessage());
  }
catch (  Exception e) {
    logger.error("internal error",e);
    respondException(response,e);
  }
  if (logger.isDebugEnabled())   logger.debug("< process '{}'",path);
  return true;
}
