{
  String baseUrl=options.getProperty("base-url");
  Graph graph=JrdfFactory.getNewGraph();
  LineHandler lineHandler=nTriplesParserFactory.createParser(graph,newMapFactory);
  GraphLineParser parser=new GraphLineParser(graph,lineHandler);
  parser.parse(reader,baseUrl);
  Map<String,List<Row>> subjectToRows=new HashMap<String,List<Row>>();
  Column subjectColumn=new Column(0,"subject");
  project.columnModel.columns.add(0,subjectColumn);
  project.columnModel.setKeyColumnIndex(0);
  ClosableIterable<Triple> triples=graph.find(ANY_SUBJECT_NODE,ANY_PREDICATE_NODE,ANY_OBJECT_NODE);
  try {
    for (    Triple triple : triples) {
      String subject=triple.getSubject().toString();
      String predicate=triple.getPredicate().toString();
      String object=triple.getObject().toString();
      Column column=project.columnModel.getColumnByName(predicate);
      if (column == null) {
        column=new Column(project.columnModel.allocateNewCellIndex(),predicate);
        try {
          project.columnModel.addColumn(-1,column,true);
        }
 catch (        ModelException e) {
        }
      }
      int cellIndex=column.getCellIndex();
      if (subjectToRows.containsKey(subject)) {
        List<Row> rows=subjectToRows.get(subject);
        for (        Row row : rows) {
          if (!ExpressionUtils.isNonBlankData(row.getCellValue(cellIndex))) {
            row.setCell(cellIndex,new Cell(object,null));
            object=null;
            break;
          }
        }
        if (object != null) {
          Row row=new Row(project.columnModel.getMaxCellIndex() + 1);
          rows.add(row);
          row.setCell(cellIndex,new Cell(object,null));
        }
      }
 else {
        List<Row> rows=new ArrayList<Row>();
        subjectToRows.put(subject,rows);
        Row row=new Row(project.columnModel.getMaxCellIndex() + 1);
        rows.add(row);
        row.setCell(subjectColumn.getCellIndex(),new Cell(subject,null));
        row.setCell(cellIndex,new Cell(object,null));
      }
    }
    for (    Entry<String,List<Row>> entry : subjectToRows.entrySet()) {
      project.rows.addAll(entry.getValue());
    }
  }
  finally {
    triples.iterator().close();
  }
}
