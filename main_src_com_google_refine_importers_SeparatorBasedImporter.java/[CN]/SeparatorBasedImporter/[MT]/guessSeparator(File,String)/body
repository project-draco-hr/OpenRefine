{
  try {
    InputStream is=new FileInputStream(file);
    try {
      Reader reader=encoding != null ? new InputStreamReader(is,encoding) : new InputStreamReader(is);
      LineNumberReader lineNumberReader=new LineNumberReader(reader);
      List<Separator> separators=new ArrayList<SeparatorBasedImporter.Separator>();
      Map<Character,Separator> separatorMap=new HashMap<Character,SeparatorBasedImporter.Separator>();
      int totalBytes=0;
      int lineCount=0;
      String s;
      while (totalBytes < 64 * 1024 && lineCount < 100 && (s=lineNumberReader.readLine()) != null) {
        totalBytes+=s.length() + 1;
        if (s.length() == 0) {
          continue;
        }
        lineCount++;
        for (int i=0; i < s.length(); i++) {
          char c=s.charAt(i);
          if (!Character.isLetterOrDigit(c) && !"\"' .-".contains(s.subSequence(i,i + 1))) {
            Separator separator=separatorMap.get(c);
            if (separator == null) {
              separator=new Separator();
              separator.separator=c;
              separatorMap.put(c,separator);
              separators.add(separator);
            }
            separator.currentLineCount++;
          }
        }
        for (        Separator separator : separators) {
          separator.totalCount+=separator.currentLineCount;
          separator.totalOfSquaredCount+=separator.currentLineCount * separator.currentLineCount;
          separator.currentLineCount=0;
        }
      }
      if (separators.size() > 0) {
        for (        Separator separator : separators) {
          separator.averagePerLine=separator.totalCount / (double)lineCount;
          separator.stddev=Math.sqrt(separator.totalOfSquaredCount / (double)lineCount - separator.averagePerLine * separator.averagePerLine);
        }
        Collections.sort(separators,new Comparator<Separator>(){
          @Override public int compare(          Separator sep0,          Separator sep1){
            return Double.compare(sep0.stddev,sep1.stddev);
          }
        }
);
        for (        Separator separator : separators) {
          if (separator.stddev / separator.averagePerLine < 0.1) {
            return separator;
          }
        }
      }
    }
  finally {
      is.close();
    }
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}
