{
  final int linesPerRow=JSONUtilities.getInt(options,"linesPerRow",1);
  final List<Object> columnNames;
  if (options.has("columnNames")) {
    columnNames=new ArrayList<Object>();
    String[] strings=JSONUtilities.getStringArray(options,"columnNames");
    for (    String s : strings) {
      columnNames.add(s);
    }
    JSONUtilities.safePut(options,"headerLines",1);
  }
 else {
    columnNames=null;
    JSONUtilities.safePut(options,"headerLines",0);
  }
  final LineNumberReader lnReader=new LineNumberReader(reader);
  try {
    int skip=JSONUtilities.getInt(options,"ignoreLines",-1);
    while (skip > 0) {
      lnReader.readLine();
      skip--;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  JSONUtilities.safePut(options,"ignoreLines",-1);
  TableDataReader dataReader=new TableDataReader(){
    boolean usedColumnNames=false;
    @Override public List<Object> getNextRowOfCells() throws IOException {
      if (columnNames != null && !usedColumnNames) {
        usedColumnNames=true;
        return columnNames;
      }
 else {
        List<Object> cells=null;
        for (int i=0; i < linesPerRow; i++) {
          String line=lnReader.readLine();
          if (i == 0) {
            if (line == null) {
              return null;
            }
 else {
              cells=new ArrayList<Object>(linesPerRow);
              cells.add(line);
            }
          }
 else           if (line != null) {
            cells.add(line);
          }
 else {
            break;
          }
        }
        return cells;
      }
    }
  }
;
  TabularImportingParserBase.readTable(project,metadata,job,dataReader,fileSource,limit,options,exceptions);
}
