{
  TabularSerializer serializer=new TabularSerializer(){
    @Override public void startFile(    JSONObject options){
      try {
        writer.write("<html>\n");
        writer.write("<head><title>");
        writer.write(ProjectManager.singleton.getProjectMetadata(project.id).getName());
        writer.write("</title></head>\n");
        writer.write("<body>\n");
        writer.write("<table>\n");
      }
 catch (      IOException e) {
      }
    }
    @Override public void endFile(){
      try {
        writer.write("</table>\n");
        writer.write("</body>\n");
        writer.write("</html>\n");
      }
 catch (      IOException e) {
      }
    }
    @Override public void addRow(    List<CellData> cells,    boolean isHeader){
      try {
        writer.write("<tr>");
        if (isHeader) {
          for (          CellData cellData : cells) {
            writer.write("<th>");
            writer.write((cellData != null && cellData.text != null) ? cellData.text : "");
            writer.write("</th>");
          }
        }
 else {
          for (          CellData cellData : cells) {
            writer.write("<td>");
            if (cellData != null && cellData.text != null) {
              if (cellData.link != null) {
                writer.write("<a href=\"");
                writer.write(StringEscapeUtils.escapeHtml(cellData.link));
                writer.write("\">");
              }
              writer.write(cellData.text);
              if (cellData.link != null) {
                writer.write("</a>");
              }
            }
            writer.write("</td>");
          }
        }
        writer.write("</tr>");
      }
 catch (      IOException e) {
      }
    }
  }
;
  CustomizableTabularExporterUtilities.exportRows(project,engine,params,serializer);
}
