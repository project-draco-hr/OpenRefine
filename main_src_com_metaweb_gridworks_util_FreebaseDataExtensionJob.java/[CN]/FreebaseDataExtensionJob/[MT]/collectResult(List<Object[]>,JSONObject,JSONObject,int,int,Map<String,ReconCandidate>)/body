{
  String propertyID=extNode.getString("id");
  String expectedTypeID=extNode.getJSONObject("expected").getString("id");
  JSONArray a=resultNode != null && resultNode.has(propertyID) && !resultNode.isNull(propertyID) ? resultNode.getJSONArray(propertyID) : null;
  if (expectedTypeID.startsWith("/type/")) {
    if (a != null) {
      int l=a.length();
      for (int r=0; r < l; r++) {
        Object o=a.isNull(r) ? null : a.get(r);
        if (o instanceof Serializable) {
          storeCell(rows,startRowIndex++,startColumnIndex,o,reconCandidateMap);
        }
      }
    }
    return new int[]{startRowIndex,startColumnIndex + 1};
  }
 else {
    boolean hasSubProperties=(extNode.has("properties") && !extNode.isNull("properties"));
    boolean isOwnColumn=!hasSubProperties || (extNode.has("included") && extNode.getBoolean("included"));
    if (a != null && a.length() > 0) {
      int maxColIndex=startColumnIndex;
      int l=a.length();
      for (int r=0; r < l; r++) {
        Object v=a.isNull(r) ? null : a.get(r);
        JSONObject o=v != null && v instanceof JSONObject ? (JSONObject)v : null;
        int startColumnIndex2=startColumnIndex;
        int startRowIndex2=startRowIndex;
        if (isOwnColumn) {
          if (o != null) {
            storeCell(rows,startRowIndex2++,startColumnIndex2++,o,reconCandidateMap);
          }
 else {
            storeCell(rows,startRowIndex2++,startColumnIndex2++,v,reconCandidateMap);
          }
        }
        if (hasSubProperties && o != null) {
          int[] rowcol=collectResult(rows,extNode.getJSONArray("properties"),o,startRowIndex,startColumnIndex2,reconCandidateMap);
          startRowIndex2=rowcol[0];
          startColumnIndex2=rowcol[1];
        }
        startRowIndex=startRowIndex2;
        maxColIndex=Math.max(maxColIndex,startColumnIndex2);
      }
      return new int[]{startRowIndex,maxColIndex};
    }
 else {
      return new int[]{startRowIndex,startColumnIndex + countColumns(extNode,null,new ArrayList<String>(),new ArrayList<String>())};
    }
  }
}
