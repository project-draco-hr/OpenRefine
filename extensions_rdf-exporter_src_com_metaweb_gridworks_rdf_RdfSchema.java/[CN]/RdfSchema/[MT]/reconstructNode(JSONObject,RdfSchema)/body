{
  Node node=null;
  int blanksCount=0;
  String nodeType=o.getString("nodeType");
  if (nodeType.startsWith("cell-as-")) {
    int columnIndex=o.getInt("columnIndex");
    String columnName=null;
    if (columnIndex != -1) {
      columnName=o.getString("columnName");
    }
    if ("cell-as-resource".equals(nodeType)) {
      String exp=o.getString("uriExpression");
      node=new CellResourceNode(columnIndex,columnName,exp);
      if (o.has("rdfTypes")) {
        List<RdfType> types=reconstructTypes(o.getJSONArray("rdfTypes"));
        ((CellResourceNode)node).setTypes(types);
      }
    }
 else     if ("cell-as-literal".equals(nodeType)) {
      String valueType=o.has("valueType") ? Util.getDataType(o.getString("valueType")) : null;
      String lang=o.has("lang") ? o.getString("lang") : null;
      node=new CellLiteralNode(columnIndex,columnName,valueType,lang);
    }
 else     if ("cell-as-blank".equals(nodeType)) {
      node=new CellBlankNode(columnIndex,columnName);
      if (o.has("rdfTypes")) {
        List<RdfType> types=reconstructTypes(o.getJSONArray("rdfTypes"));
        ((CellBlankNode)node).setTypes(types);
      }
    }
  }
 else   if ("resource".equals(nodeType)) {
    node=new ConstantResourceNode(o.getString("uri"));
    if (o.has("rdfTypes")) {
      List<RdfType> types=reconstructTypes(o.getJSONArray("rdfTypes"));
      ((ConstantResourceNode)node).setTypes(types);
    }
  }
 else   if ("literal".equals(nodeType)) {
    String valueType=o.has("valueType") ? Util.getDataType(o.getString("valueType")) : null;
    String lang=o.has("lang") ? o.getString("lang") : null;
    node=new ConstantLiteralNode(o.getString("value"),valueType,lang);
  }
 else   if ("blank".equals(nodeType)) {
    node=new ConstantBlankNode(blanksCount);
    blanksCount+=1;
    s._blanks.add((ConstantBlankNode)node);
    if (o.has("rdfTypes")) {
      List<RdfType> types=reconstructTypes(o.getJSONArray("rdfTypes"));
      ((ConstantBlankNode)node).setTypes(types);
    }
  }
  if (node != null && node instanceof ResourceNode && o.has("links")) {
    ResourceNode node2=(ResourceNode)node;
    JSONArray links=o.getJSONArray("links");
    int linkCount=links.length();
    for (int j=0; j < linkCount; j++) {
      JSONObject oLink=links.getJSONObject(j);
      node2.addLink(new Link(oLink.getString("uri"),oLink.getString("curie"),oLink.has("target") && !oLink.isNull("target") ? reconstructNode(oLink.getJSONObject("target"),s) : null));
    }
  }
  return node;
}
