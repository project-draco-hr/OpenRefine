{
  Object fromO=args[0].evaluate(bindings);
  Object toO=args[1].evaluate(bindings);
  Object stepO=args[2].evaluate(bindings);
  if (ExpressionUtils.isError(fromO)) {
    return fromO;
  }
 else   if (ExpressionUtils.isError(toO)) {
    return toO;
  }
 else   if (ExpressionUtils.isError(stepO)) {
    return stepO;
  }
 else   if (!(fromO instanceof Number) || !(toO instanceof Number) || !(stepO instanceof Number)) {
    return new EvalError("First, second, and third arguments of forRange must all be numbers");
  }
  String indexName=((VariableExpr)args[3]).getName();
  Object oldIndexValue=bindings.get(indexName);
  try {
    List<Object> results=new ArrayList<Object>();
    if (isIntegral((Number)fromO) && isIntegral((Number)stepO)) {
      long from=((Number)fromO).longValue();
      long step=((Number)stepO).longValue();
      double to=((Number)toO).doubleValue();
      while (from < to) {
        bindings.put(indexName,from);
        Object r=args[4].evaluate(bindings);
        results.add(r);
        from+=step;
      }
    }
 else {
      double from=((Number)fromO).longValue();
      double step=((Number)stepO).longValue();
      double to=((Number)toO).doubleValue();
      while (from < to) {
        bindings.put(indexName,from);
        Object r=args[4].evaluate(bindings);
        results.add(r);
        from+=step;
      }
    }
    return results.toArray();
  }
  finally {
    if (oldIndexValue != null) {
      bindings.put(indexName,oldIndexValue);
    }
 else {
      bindings.remove(indexName);
    }
  }
}
