{
  Provider provider=OAuthUtilities.getProvider(FREEBASE_HOST);
  Credentials credentials=Credentials.getCredentials(request,provider,Credentials.Type.ACCESS);
  JSONObject mdo_info=new JSONObject();
  mdo_info.put("name",source_name);
  if (source_id != null) {
    mdo_info.put("info_source",source_id);
  }
  JSONObject user_info=new JSONObject(getUserInfo(credentials,provider));
  if (user_info.has("username")) {
    String user_id=user_info.getString("id");
    boolean allowed=isAllowedToWrite(provider,graph,user_id);
    if (allowed) {
      List<NameValuePair> formparams=new ArrayList<NameValuePair>();
      formparams.add(new BasicNameValuePair("user",user_info.getString("id")));
      formparams.add(new BasicNameValuePair("action_type","LOAD_TRIPLE"));
      formparams.add(new BasicNameValuePair("operator",user_info.getString("id")));
      formparams.add(new BasicNameValuePair("software_tool_used",GRIDWORKS_ID));
      formparams.add(new BasicNameValuePair("mdo_info",mdo_info.toString()));
      formparams.add(new BasicNameValuePair("graphport",graph));
      formparams.add(new BasicNameValuePair("payload",triples));
      formparams.add(new BasicNameValuePair("check_params","false"));
      if (mdo_id != null) {
        formparams.add(new BasicNameValuePair("mdo_guid",mdo_id));
      }
      UrlEncodedFormEntity entity=new UrlEncodedFormEntity(formparams,"UTF-8");
      HttpPost httpRequest=new HttpPost(FREEQ_URL);
      httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT,"Gridworks " + GridworksServlet.getVersion());
      httpRequest.setEntity(entity);
      HttpPost surrogateRequest=new HttpPost(getUserInfoURL(FREEBASE_HOST));
      surrogateRequest.setEntity(entity);
      OAuthConsumer consumer=OAuthUtilities.getConsumer(credentials,provider);
      consumer.sign(surrogateRequest);
      Header[] h=surrogateRequest.getHeaders("Authorization");
      if (h.length > 0) {
        httpRequest.setHeader("X-Freebase-Credentials",h[0].getValue());
      }
 else {
        throw new RuntimeException("Couldn't find the oauth signature header in the surrogate request");
      }
      HttpClient httpClient=new DefaultHttpClient();
      HttpResponse httpResponse=httpClient.execute(httpRequest);
      return EntityUtils.toString(httpResponse.getEntity());
    }
 else {
      throw new RuntimeException("User '" + user_id + "' is not allowed to write to '"+ graph+ "' with Gridworks");
    }
  }
 else {
    throw new RuntimeException("Invalid credentials");
  }
}
