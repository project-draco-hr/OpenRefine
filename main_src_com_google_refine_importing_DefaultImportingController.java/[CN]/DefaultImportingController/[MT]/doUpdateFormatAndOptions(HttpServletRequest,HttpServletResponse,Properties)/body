{
  long jobID=Long.parseLong(parameters.getProperty("jobID"));
  ImportingJob job=ImportingManager.getJob(jobID);
  if (job == null) {
    HttpUtilities.respond(response,"error","No such import job");
    return;
  }
  try {
    JSONObject config=job.getOrCreateDefaultConfig();
    if (!("ready".equals(config.getString("state")))) {
      HttpUtilities.respond(response,"error","Job not ready");
      return;
    }
    String format=request.getParameter("format");
    JSONObject optionObj=ParsingUtilities.evaluateJsonStringToObject(request.getParameter("options"));
    List<Exception> exceptions=new LinkedList<Exception>();
    ImportingUtilities.previewParse(job,format,optionObj,exceptions);
    Writer w=response.getWriter();
    JSONWriter writer=new JSONWriter(w);
    try {
      writer.object();
      if (exceptions.size() == 0) {
        job.project.update();
        writer.key("status");
        writer.value("ok");
      }
 else {
        writer.key("status");
        writer.value("error");
        writer.key("errors");
        writer.array();
        writeErrors(writer,exceptions);
        writer.endArray();
      }
      writer.endObject();
    }
 catch (    JSONException e) {
      throw new ServletException(e);
    }
 finally {
      w.flush();
      w.close();
    }
  }
 catch (  JSONException e) {
    throw new ServletException(e);
  }
}
