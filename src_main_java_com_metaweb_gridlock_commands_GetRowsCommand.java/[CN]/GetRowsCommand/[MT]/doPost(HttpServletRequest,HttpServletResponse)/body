{
  try {
    Project project=getProject(request);
    Engine engine=getEngine(request,project);
    int start=Math.min(project.rows.size(),Math.max(0,getIntegerParameter(request,"start",0)));
    int limit=Math.min(project.rows.size() - start,Math.max(0,getIntegerParameter(request,"limit",20)));
    Properties options=new Properties();
    JSONObject o=new JSONObject();
    List<JSONObject> a=new ArrayList<JSONObject>(limit);
    try {
      FilteredRows filteredRows=engine.getAllFilteredRows();
      RowAccumulator acc=new RowAccumulator(start,limit){
        List<JSONObject> list;
        Properties options;
        public RowAccumulator init(        List<JSONObject> list,        Properties options){
          this.list=list;
          this.options=options;
          return this;
        }
        @Override public void internalVisit(        int rowIndex,        Row row){
          try {
            JSONObject ro=row.getJSON(options);
            ro.put("i",rowIndex);
            list.add(ro);
          }
 catch (          JSONException e) {
          }
        }
      }
.init(a,options);
      filteredRows.accept(project,acc);
      o.put("filtered",acc.total);
    }
 catch (    JSONException e) {
      respondException(response,e);
    }
    o.put("start",start);
    o.put("limit",limit);
    o.put("rows",a);
    o.put("total",project.rows.size());
    respondJSON(response,o);
  }
 catch (  Exception e) {
    respondException(response,e);
  }
}
