{
  POIFSFileSystem fs=new POIFSFileSystem(inputStream);
  HSSFWorkbook wb=new HSSFWorkbook(fs);
  HSSFSheet sheet=wb.getSheetAt(0);
  int firstRow=sheet.getFirstRowNum();
  int lastRow=sheet.getLastRowNum();
  int r=firstRow;
  List<Integer> nonBlankIndices=null;
  List<String> nonBlankHeaderStrings=null;
  for (; r <= lastRow; r++) {
    HSSFRow row=sheet.getRow(r);
    if (row == null) {
      continue;
    }
    short firstCell=row.getFirstCellNum();
    short lastCell=row.getLastCellNum();
    if (firstCell >= 0 && firstCell <= lastCell) {
      nonBlankIndices=new ArrayList<Integer>(lastCell - firstCell + 1);
      nonBlankHeaderStrings=new ArrayList<String>(lastCell - firstCell + 1);
      for (int c=firstCell; c <= lastCell; c++) {
        HSSFCell cell=row.getCell(c);
        if (cell != null) {
          String text=cell.getStringCellValue().trim();
          if (text.length() > 0) {
            nonBlankIndices.add((int)c);
            nonBlankHeaderStrings.add(text);
          }
        }
      }
      if (nonBlankIndices.size() > 0) {
        r++;
        break;
      }
    }
  }
  if (nonBlankIndices == null || nonBlankIndices.size() == 0) {
    return;
  }
  for (int c=0; c < nonBlankIndices.size(); c++) {
    Column column=new Column(c,nonBlankHeaderStrings.get(c));
    project.columnModel.columns.add(column);
  }
  for (; r <= lastRow; r++) {
    HSSFRow row=sheet.getRow(r);
    if (row == null) {
      continue;
    }
    short firstCell=row.getFirstCellNum();
    short lastCell=row.getLastCellNum();
    if (firstCell >= 0 && firstCell <= lastCell) {
      Row newRow=new Row(nonBlankIndices.size());
      boolean hasData=false;
      for (int c=0; c < nonBlankIndices.size(); c++) {
        if (c < firstCell || c > lastCell) {
          continue;
        }
        HSSFCell cell=row.getCell(c);
        if (cell == null) {
          continue;
        }
        int cellType=cell.getCellType();
        if (cellType == HSSFCell.CELL_TYPE_ERROR || cellType == HSSFCell.CELL_TYPE_BLANK) {
          continue;
        }
        Object value=null;
        if (cellType == HSSFCell.CELL_TYPE_BOOLEAN) {
          value=cell.getBooleanCellValue();
        }
 else         if (cellType == HSSFCell.CELL_TYPE_NUMERIC) {
          value=cell.getNumericCellValue();
        }
 else {
          String text=cell.getStringCellValue().trim();
          if (text.length() > 0) {
            value=text;
          }
        }
        if (value != null) {
          newRow.setCell(c,new Cell(value,null));
          hasData=true;
        }
      }
      if (hasData) {
        project.rows.add(newRow);
      }
    }
  }
}
