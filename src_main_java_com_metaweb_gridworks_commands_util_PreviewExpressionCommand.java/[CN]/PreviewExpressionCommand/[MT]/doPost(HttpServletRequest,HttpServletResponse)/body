{
  try {
    Project project=getProject(request);
    int cellIndex=Integer.parseInt(request.getParameter("cellIndex"));
    String expression=request.getParameter("expression");
    String rowIndicesString=request.getParameter("rowIndices");
    if (rowIndicesString == null) {
      respond(response,"{ \"code\" : \"error\", \"message\" : \"No row indices specified\" }");
      return;
    }
    JSONArray rowIndices=jsonStringToArray(rowIndicesString);
    int length=rowIndices.length();
    JSONWriter writer=new JSONWriter(response.getWriter());
    writer.object();
    try {
      Evaluable eval=new Parser(expression).getExpression();
      writer.key("code");
      writer.value("ok");
      writer.key("results");
      writer.array();
      Properties bindings=ExpressionUtils.createBindings(project);
      for (int i=0; i < length; i++) {
        Object result=null;
        int rowIndex=rowIndices.getInt(i);
        if (rowIndex >= 0 && rowIndex < project.rows.size()) {
          Row row=project.rows.get(rowIndex);
          Cell cell=row.getCell(cellIndex);
          ExpressionUtils.bind(bindings,row,rowIndex,cell);
          try {
            result=eval.evaluate(bindings);
          }
 catch (          Exception e) {
          }
        }
        if (result != null) {
          if (result instanceof EvalError) {
            result="[Error: " + ((EvalError)result).message + "]";
          }
 else           if (result instanceof HasFields) {
            result="[object " + result.getClass().getSimpleName() + "]";
          }
        }
        writer.value(result);
      }
      writer.endArray();
    }
 catch (    ParserException e) {
      writer.key("code");
      writer.value("error");
      writer.key("type");
      writer.value("parser");
      writer.key("message");
      writer.value(e.getMessage());
    }
catch (    Exception e) {
      writer.key("code");
      writer.value("error");
      writer.key("type");
      writer.value("other");
      writer.key("message");
      writer.value(e.getMessage());
    }
    writer.endObject();
  }
 catch (  Exception e) {
    respondException(response,e);
  }
}
