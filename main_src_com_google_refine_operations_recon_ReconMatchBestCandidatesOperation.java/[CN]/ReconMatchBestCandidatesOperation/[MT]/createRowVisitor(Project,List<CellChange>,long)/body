{
  Column column=project.columnModel.getColumnByName(_columnName);
  return new RowVisitor(){
    int cellIndex;
    List<CellChange> cellChanges;
    Map<Long,Recon> dupReconMap=new HashMap<Long,Recon>();
    long historyEntryID;
    public RowVisitor init(    int cellIndex,    List<CellChange> cellChanges,    long historyEntryID){
      this.cellIndex=cellIndex;
      this.cellChanges=cellChanges;
      this.historyEntryID=historyEntryID;
      return this;
    }
    @Override public void start(    Project project){
    }
    @Override public void end(    Project project){
    }
    @Override public boolean visit(    Project project,    int rowIndex,    Row row){
      if (cellIndex < row.cells.size()) {
        Cell cell=row.cells.get(cellIndex);
        if (cell != null && cell.recon != null) {
          ReconCandidate candidate=cell.recon.getBestCandidate();
          if (candidate != null) {
            Recon newRecon;
            if (dupReconMap.containsKey(cell.recon.id)) {
              newRecon=dupReconMap.get(cell.recon.id);
              newRecon.judgmentBatchSize++;
            }
 else {
              newRecon=cell.recon.dup(historyEntryID);
              newRecon.judgmentBatchSize=1;
              newRecon.match=candidate;
              newRecon.matchRank=0;
              newRecon.judgment=Judgment.Matched;
              newRecon.judgmentAction="mass";
              dupReconMap.put(cell.recon.id,newRecon);
            }
            Cell newCell=new Cell(cell.value,newRecon);
            CellChange cellChange=new CellChange(rowIndex,cellIndex,cell,newCell);
            cellChanges.add(cellChange);
          }
        }
      }
      return false;
    }
  }
.init(column.getCellIndex(),cellChanges,historyEntryID);
}
